<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>通用加密算法解析和魔改</title>
      <link href="/2022/07/19/common-algorithm/"/>
      <url>/2022/07/19/common-algorithm/</url>
      
        <content type="html"><![CDATA[<p>这里主要坦述MD5和AES的流程分析。</p><p>这两种代表了目前最主流的加密组合。</p><h1 id="MD5"><a href="#MD5" class="headerlink" title="MD5"></a>MD5</h1><p>聊起md5，许多开发人员用这个的目的，做个hash值，api签名加个密，密码md5….</p><h4 id="散列函数"><a href="#散列函数" class="headerlink" title="散列函数"></a>散列函数</h4><p>散列函数，也称作哈希函数，消息摘要函数，单向函数或者杂凑函数。散列函数主要用于验证数据的完整性。通过散列函数，可以创建消息的“数字指纹”，消息接收方可以通过校验消息的哈希值来验证消息的完整性，防止消息被篡改。散列函数具有以下特性：</p><ol><li>散列函数的运算过程是不可逆的，这个称为散列函数的单向性。</li><li>对于一个已知的消息及其散列值，要找到另外一个消息使其获得相同的散列值是不可能的，这个特性称为散列函数的弱碰撞性。这个特性可以用来防止消息伪造。</li><li>任意两个不同消息的散列值一定不同。</li><li>对原始消息长度没有限制。</li></ol><p>任何消息经过散列函数处理后，都会产生一个唯一的散列值，这个散列值可以用来验证消息的完整性。计算消息散列值的过程被称为“消息摘要”，计算消息散列值的算法被称为消息摘要算法。常使用的消息摘要算法有：MD—消息摘要算法，SHA—安全散列算法，MAC—消息认证码算法。本文主要来了解MD算法。</p><h2 id="MD5算法原理"><a href="#MD5算法原理" class="headerlink" title="MD5算法原理"></a>MD5算法原理</h2><p>假设原始消息长度是b（以bit为单位），注意这里b可以是任意长度，并不一定要是8的整数倍。计算该消息MD5值的过程如下：</p><h3 id="1-填充信息"><a href="#1-填充信息" class="headerlink" title="1.填充信息"></a>1.填充信息</h3><p>在计算消息的MD5值之前，首先对原始信息进行填充，这里的信息填充分为两步。<br> 第一步，对原始信息进行填充，填充之后，要求信息的长度对512取余等于448。填充的规则如下：假设原始信息长度为b bit，那么在信息的b+1 bit位填充1，剩余的位填充0，直到信息长度对512取余为448。这里有一点需要注意，如果原始信息长度对512取余正好等于448，这种情况仍然要进行填充，很明显，在这时我们要填充的信息长度是512位，直到信息长度对512取余再次等于448。所以，填充的位数最少为1，最大为512。<br> 第二步，填充信息长度，我们需要把原始信息长度转换成以bit为单位，然后在第一步操作的结果后面填充64bit的数据表示原始信息长度。第一步对原始信息进行填充之后，信息长度对512取余结果为448，这里再填充64bit的长度信息，整个信息恰好可以被512整除。其实从后续过程可以看到，计算MD5时，是将信息分为若干个分组进行处理的，每个信息分组的长度是512bit。</p><h3 id="2-信息处理"><a href="#2-信息处理" class="headerlink" title="2.信息处理"></a>2.信息处理</h3><p>在进行MD5值计算之前，我们先来做一些定义。</p><ul><li><p><strong>信息分组定义</strong><br> 原始信息经过填充之后，最终得到的信息长度（bit）是512的整数倍，我们先对信息进行分组，每512bit为一个分组，然后再将每个信息分组（512bit）再细分为16个小的分组，每个小分组的长度为32bit。规定如下<br> Mp 代表经过填充之后的信息<br> LM 表示Mp的长度（以bit为单位）<br> N 表示分组个数，N &#x3D; LM&#x2F;512<br> M[i] 表示将原始信息进行分组后的第i个信息分组，其中i&#x3D;1…N<br> X[i] 表示将M[i]进行分组后的第i个小分组，其中i&#x3D;1…16</p></li><li><p><strong>标准幻数定义</strong><br> 现定义四个标准幻数如下，<br> A &#x3D; 01 23 45 67<br> B &#x3D; 89 ab cd ef<br> C &#x3D; fe dc ba 98<br> D &#x3D; 76 54 32 10<br> 在计算机中存储时，采用小端存储方式，以A为例，A在Java中初始化的代码为为A&#x3D;0x67452301</p></li><li><p><strong>常量表T</strong><br> T是一个常量表，T[i] &#x3D; 4294967296 * abs(sin(i))的运算结果取整，其中i&#x3D;1…64</p></li></ul><p><img src="/images/pasted-4.png" alt="upload successful"></p><ul><li><p><strong>辅助方法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">我们定义四个辅助方法。</span><br><span class="line">F(x,y,z) = (x &amp; y) | ((~x) &amp; z)</span><br><span class="line">G(x,y,z) = (x &amp; z) | (y &amp; (~z))</span><br><span class="line">H(x,y,z) = x ^ y ^ z</span><br><span class="line"><span class="title function_">I</span><span class="params">(x,y,z)</span> = y ^ (x | (~z))</span><br><span class="line">其中，x，y，z长度为32bit</span><br></pre></td></tr></table></figure></li></ul><p>下面就是最核心的信息处理过程，计算MD5的过程实际上就是轮流处理每个信息分组的过程。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">    A=<span class="number">0x67452301</span></span><br><span class="line">    B=<span class="number">0xefcdab89</span></span><br><span class="line">    C=<span class="number">0x98badcfe</span></span><br><span class="line">    D=<span class="number">0x10325476</span></span><br><span class="line">    <span class="keyword">for</span>( j=<span class="number">1</span>;j&lt;=N;j++)&#123;  <span class="comment">//依次处理每个分组，其中N代表分组个数</span></span><br><span class="line">      AA = <span class="type">A</span> </span><br><span class="line">      <span class="variable">BB</span> <span class="operator">=</span> <span class="type">B</span> </span><br><span class="line">      <span class="variable">CC</span> <span class="operator">=</span> <span class="type">C</span></span><br><span class="line">      <span class="variable">DD</span> <span class="operator">=</span> D</span><br><span class="line">      <span class="comment">//开始处理分组，每个信息分组要经过4轮处理</span></span><br><span class="line">      <span class="comment">/*第一轮</span></span><br><span class="line"><span class="comment">      假设 [abcd k s i] 表示执行的运算是 a = b + ((a + F(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)，其中&lt;&lt;&lt;表示循环移位。第一轮运算就是对分组执行以下所示的16次运算，运算的顺序从左到右。*/</span></span><br><span class="line">    [ABCD <span class="number">0</span> <span class="number">7</span> <span class="number">1</span>] [DABC <span class="number">1</span> <span class="number">12</span> <span class="number">2</span>] [CDAB <span class="number">2</span> <span class="number">17</span> <span class="number">3</span>] [BCDA <span class="number">3</span> <span class="number">22</span> <span class="number">4</span>]</span><br><span class="line">    [ABCD <span class="number">4</span> <span class="number">7</span> <span class="number">5</span>] [DABC <span class="number">5</span> <span class="number">12</span> <span class="number">6</span>] [CDAB <span class="number">6</span> <span class="number">17</span> <span class="number">7</span>] [BCDA <span class="number">7</span> <span class="number">22</span> <span class="number">8</span>]</span><br><span class="line">    [ABCD <span class="number">8</span> <span class="number">7</span> <span class="number">9</span>] [DABC <span class="number">9</span> <span class="number">12</span> <span class="number">10</span>] [CDAB <span class="number">10</span> <span class="number">17</span> <span class="number">11</span>] [BCDA <span class="number">11</span> <span class="number">22</span> <span class="number">12</span>]</span><br><span class="line">    [ABCD <span class="number">12</span> <span class="number">7</span> <span class="number">13</span>] [DABC <span class="number">13</span> <span class="number">12</span> <span class="number">14</span>] [CDAB <span class="number">14</span> <span class="number">17</span> <span class="number">15</span>] [BCDA <span class="number">15</span> <span class="number">22</span> <span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*第二轮</span></span><br><span class="line"><span class="comment">    假设 [abcd k s i] 表示执行的运算是 a = b + ((a + G(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)，其中 &lt;&lt;&lt;表示循环移位。第一轮运算就是对分组执行以下所示的16次运算，运算的顺 序从左到右。*/</span></span><br><span class="line">    [ABCD <span class="number">1</span> <span class="number">5</span> <span class="number">17</span>] [DABC <span class="number">6</span> <span class="number">9</span> <span class="number">18</span>] [CDAB <span class="number">11</span> <span class="number">14</span> <span class="number">19</span>] [BCDA <span class="number">0</span> <span class="number">20</span> <span class="number">20</span>]</span><br><span class="line">    [ABCD <span class="number">5</span> <span class="number">5</span> <span class="number">21</span>] [DABC <span class="number">10</span> <span class="number">9</span> <span class="number">22</span>] [CDAB <span class="number">15</span> <span class="number">14</span> <span class="number">23</span>] [BCDA <span class="number">4</span> <span class="number">20</span> <span class="number">24</span>]</span><br><span class="line">    [ABCD <span class="number">9</span> <span class="number">5</span> <span class="number">25</span>] [DABC <span class="number">14</span> <span class="number">9</span> <span class="number">26</span>] [CDAB <span class="number">3</span> <span class="number">14</span> <span class="number">27</span>] [BCDA <span class="number">8</span> <span class="number">20</span> <span class="number">28</span>]</span><br><span class="line">    [ABCD <span class="number">13</span> <span class="number">5</span> <span class="number">29</span>] [DABC <span class="number">2</span> <span class="number">9</span> <span class="number">30</span>] [CDAB <span class="number">7</span> <span class="number">14</span> <span class="number">31</span>] [BCDA <span class="number">12</span> <span class="number">20</span> <span class="number">32</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*第三轮</span></span><br><span class="line"><span class="comment">    假设 [abcd k s i] 表示执行的运算是 a = b + ((a + H(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)，其中&lt;&lt;&lt;表示循环移位。第一轮运算就是对分组执行以下所示的16次运算，运算的顺 序从左到右。*/</span></span><br><span class="line">    [ABCD <span class="number">5</span> <span class="number">4</span> <span class="number">33</span>] [DABC <span class="number">8</span> <span class="number">11</span> <span class="number">34</span>] [CDAB <span class="number">11</span> <span class="number">16</span> <span class="number">35</span>] [BCDA <span class="number">14</span> <span class="number">23</span> <span class="number">36</span>]</span><br><span class="line">    [ABCD <span class="number">1</span> <span class="number">4</span> <span class="number">37</span>] [DABC <span class="number">4</span> <span class="number">11</span> <span class="number">38</span>] [CDAB <span class="number">7</span> <span class="number">16</span> <span class="number">39</span>] [BCDA <span class="number">10</span> <span class="number">23</span> <span class="number">40</span>]</span><br><span class="line">    [ABCD <span class="number">13</span> <span class="number">4</span> <span class="number">41</span>] [DABC <span class="number">0</span> <span class="number">11</span> <span class="number">42</span>] [CDAB <span class="number">3</span> <span class="number">16</span> <span class="number">43</span>] [BCDA <span class="number">6</span> <span class="number">23</span> <span class="number">44</span>]</span><br><span class="line">    [ABCD <span class="number">9</span> <span class="number">4</span> <span class="number">45</span>] [DABC <span class="number">12</span> <span class="number">11</span> <span class="number">46</span>] [CDAB <span class="number">15</span> <span class="number">16</span> <span class="number">47</span>] [BCDA <span class="number">2</span> <span class="number">23</span> <span class="number">48</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*第四轮</span></span><br><span class="line"><span class="comment">    假设 [abcd k s i] 表示执行的运算是 a = b + ((a + I(b,c,d) + X[k] + T[i]) &lt;&lt;&lt; s)，其中&lt;&lt;&lt;表示循环移位。第一轮运算就是对分组执行以下所示的16次运算，运算的顺序从左到右。*/</span></span><br><span class="line">    [ABCD <span class="number">0</span> <span class="number">6</span> <span class="number">49</span>] [DABC <span class="number">7</span> <span class="number">10</span> <span class="number">50</span>] [CDAB <span class="number">14</span> <span class="number">15</span> <span class="number">51</span>] [BCDA <span class="number">5</span> <span class="number">21</span> <span class="number">52</span>]</span><br><span class="line">    [ABCD <span class="number">12</span> <span class="number">6</span> <span class="number">53</span>] [DABC <span class="number">3</span> <span class="number">10</span> <span class="number">54</span>] [CDAB <span class="number">10</span> <span class="number">15</span> <span class="number">55</span>] [BCDA <span class="number">1</span> <span class="number">21</span> <span class="number">56</span>]</span><br><span class="line">    [ABCD <span class="number">8</span> <span class="number">6</span> <span class="number">57</span>] [DABC <span class="number">15</span> <span class="number">10</span> <span class="number">58</span>] [CDAB <span class="number">6</span> <span class="number">15</span> <span class="number">59</span>] [BCDA <span class="number">13</span> <span class="number">21</span> <span class="number">60</span>]</span><br><span class="line">    [ABCD <span class="number">4</span> <span class="number">6</span> <span class="number">61</span>] [DABC <span class="number">11</span> <span class="number">10</span> <span class="number">62</span>] [CDAB <span class="number">2</span> <span class="number">15</span> <span class="number">63</span>] [BCDA <span class="number">9</span> <span class="number">21</span> <span class="number">64</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将当前消息分组的运算结果和上一次的结果进行累加</span></span><br><span class="line">    A = A + <span class="type">AA</span></span><br><span class="line">    <span class="variable">B</span> <span class="operator">=</span> B + <span class="type">BB</span></span><br><span class="line">    <span class="variable">C</span> <span class="operator">=</span> C + <span class="type">CC</span></span><br><span class="line">    <span class="variable">D</span> <span class="operator">=</span> D + DD</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//最终我们按照低字节在前的顺序依次将A,B,C,D拼接起来，就是计算得到的MD5值，因此，MD5值的长度是固定的，为128bit。</span></span><br></pre></td></tr></table></figure><p>作者：咸鱼0907<br>链接：<a href="https://www.jianshu.com/p/93a8ab5bfeb9">https://www.jianshu.com/p/93a8ab5bfeb9</a><br>来源：简书<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p><h2 id="md5算法过程"><a href="#md5算法过程" class="headerlink" title="md5算法过程"></a>md5算法过程</h2><p>MD5以512位为一个分组处理输入，每个分组分成16个32位的子分组，经过处理后，输出四个32位分组，这四个32位分组级联后生成一个128位的MD5值。</p><p>一、填充：如果输入信息长度（以bit记）模512不余448，那就要对输入信息进行填充，填充一个1和若干个0，使得信息长度变成512<em>N+448，*<em>若消息长度本身即为448，仍要填充512位，使其长度变成960</em></em></p><p>二、记录：用64位记录输入信息的长度，然后添加到第一步的信息中，形成（N+1）*512的信息；</p><p>三、装入默认值：A&#x3D;0x01234567,B&#x3D;0x89ABCDEF,C&#x3D;0xFEDCBA98,D&#x3D;0x76543210。这里每个缓存均为32位（16进制四位，八个数）</p><p>四、分组：将512一组的数据进行分组，分成16个32位的子分组，将与幻数进行循环运算。</p><p>五、循环运算：这里借用一张MD5原理图进行说明</p><p><img src="/images/pasted-3.png" alt="upload successful"></p><h2 id="MD5分析和魔改"><a href="#MD5分析和魔改" class="headerlink" title="MD5分析和魔改"></a>MD5分析和魔改</h2><p>md5的源码，直接github上一搜一大把，就懒得copy了。<br>上文提到的4个东西</p><ol><li>信息分组定义</li><li>标准幻数定义</li><li>常量表T</li><li>辅助方法</li></ol><p>这四个东西都可以作为md5的特征，看看findcrypt这个插件，在ida中是如何识别md5算法的。</p><p><a href="https://github.com/polymorf/findcrypt-yara/blob/master/findcrypt3.rules">https://github.com/polymorf/findcrypt-yara/blob/master/findcrypt3.rules</a></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">rule MD5_Constants &#123;</span><br><span class="line">meta:</span><br><span class="line">author = <span class="string">&quot;phoul (@phoul)&quot;</span></span><br><span class="line">description = <span class="string">&quot;Look for MD5 constants&quot;</span></span><br><span class="line">date = <span class="string">&quot;2014-01&quot;</span></span><br><span class="line">version = <span class="string">&quot;0.2&quot;</span></span><br><span class="line">strings:</span><br><span class="line"><span class="comment">// Init constants</span></span><br><span class="line">$c0 = &#123; <span class="number">67452301</span> &#125;</span><br><span class="line">$c1 = &#123; efcdab89 &#125;</span><br><span class="line">$c2 = &#123; 98badcfe &#125;</span><br><span class="line">$c3 = &#123; <span class="number">10325476</span> &#125;</span><br><span class="line">$c4 = &#123; <span class="number">01234567</span> &#125;</span><br><span class="line">$c5 = &#123; 89ABCDEF &#125;</span><br><span class="line">$c6 = &#123; FEDCBA98 &#125;</span><br><span class="line">$c7 = &#123; <span class="number">76543210</span> &#125;</span><br><span class="line"><span class="comment">// Round 2</span></span><br><span class="line">$c8 = &#123; F4D50d87 &#125;</span><br><span class="line">$c9 = &#123; 78A46AD7 &#125;</span><br><span class="line">condition:</span><br><span class="line"><span class="number">5</span> of them</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rule MD5_API &#123;</span><br><span class="line">meta:</span><br><span class="line">author = <span class="string">&quot;_pusher_&quot;</span></span><br><span class="line">description = <span class="string">&quot;Looks for MD5 API&quot;</span></span><br><span class="line">date = <span class="string">&quot;2016-07&quot;</span></span><br><span class="line">strings:</span><br><span class="line">$advapi32 = <span class="string">&quot;advapi32.dll&quot;</span> wide ascii <span class="type">nocase</span></span><br><span class="line"><span class="variable">$cryptdll</span> <span class="operator">=</span> <span class="string">&quot;cryptdll.dll&quot;</span> wide ascii <span class="type">nocase</span></span><br><span class="line"><span class="variable">$MD5Init</span> <span class="operator">=</span> <span class="string">&quot;MD5Init&quot;</span> wide <span class="type">ascii</span></span><br><span class="line"><span class="variable">$MD5Update</span> <span class="operator">=</span> <span class="string">&quot;MD5Update&quot;</span> wide <span class="type">ascii</span></span><br><span class="line"><span class="variable">$MD5Final</span> <span class="operator">=</span> <span class="string">&quot;MD5Final&quot;</span> wide ascii</span><br><span class="line">condition:</span><br><span class="line">($advapi32 or $cryptdll) and ($MD5Init and $MD5Update and $MD5Final)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用标准幻数来识别的。</p><p>试着想想，在客户端暴露md5，或者直接在java层调用api的话，那么其实用任何语言的算法都能够实现。</p><p>此时又带来算法泄露的问题，有些大厂是把md5修改之后，直接编译器给vm了。这样在c层分析起来也特别困难。</p><h2 id="md5修改点"><a href="#md5修改点" class="headerlink" title="md5修改点"></a>md5修改点</h2><p>以上说的4处特征，都可以修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">信息分组定义：每次填充的值都是标准幻数，我们可以把<span class="number">16</span>个字节的幻数，填充成每次md5加密之后的结果。</span><br><span class="line">标准幻数定义：这是按照小端序来排列的，可以直接换成大端序。</span><br><span class="line">常量表T：T是一个常量表，T[i] = <span class="number">4294967296</span> * <span class="built_in">abs</span>(sin(i))的运算结果取整，其中i=<span class="number">1</span>…<span class="number">64</span>，</span><br><span class="line">sin函数可以直接替换成cos函数。</span><br><span class="line">辅助方法：F,G,H,I 的算法依旧可以自己骚味修改修改。</span><br><span class="line">最后建议如果客户端的话，放在ndk或者dylib动态链接库中。</span><br></pre></td></tr></table></figure><h1 id="AES"><a href="#AES" class="headerlink" title="AES"></a>AES</h1><p>讲完了hash算法(不可逆)，来讲讲对称算法aes的作用。</p><p>这套算法在工作中也经常用，用来加密一些敏感信息….</p><h2 id="基本-AES-加密"><a href="#基本-AES-加密" class="headerlink" title="基本 AES 加密"></a>基本 AES 加密</h2><p>AES 算法会将纯文本字符串分解为 16 字节的“块”，这些“块”会经过几轮加密。这些步骤在官方<a href="https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf">AES 文档</a>中有详细说明：</p><ol><li>展开提供的密钥（<strong>密钥扩展[部分</strong>）</li><li>使用扩展密钥的明文块上的<strong>AddRoundKey函数</strong></li><li>多轮加密<ol><li>块上的<strong>SubBytes</strong>功能</li><li>块上的<strong>ShiftRows</strong>功能</li><li>块上的<strong>MixColumns</strong>功能</li><li><strong>AddRoundKey</strong> 函数</li></ol></li><li>最终<strong>SubBytes</strong>调用</li><li>最后的 <strong>ShiftRows</strong> 调用</li><li>最后的 <strong>AddRoundKey</strong> 调用</li></ol><p>使用的轮数和扩展密钥<code>EK</code>的大小 取决于所提供密钥的大小。下表显示了密钥长度、轮数和扩展密钥长度之间的相关性：</p><table><thead><tr><th align="center"><strong>Key Length (Bits)</strong></th><th align="center"><strong>Number of Rounds</strong></th><th align="center"><strong>Expanded Key Length (Words)</strong></th></tr></thead><tbody><tr><td align="center">128</td><td align="center">10</td><td align="center">44</td></tr><tr><td align="center">192</td><td align="center">12</td><td align="center">72</td></tr><tr><td align="center">256</td><td align="center">14</td><td align="center">112</td></tr></tbody></table><p>也就是所谓的aes的key的长度，对应的轮数。</p><p>key：16位  加密轮数 10轮</p><p>key：24位  加密轮数 12轮</p><p>key：32位  加密轮数 14轮</p><h2 id="AES加密流程"><a href="#AES加密流程" class="headerlink" title="AES加密流程"></a>AES加密流程</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">cipher</span>(<span class="params">self, pt</span>):</span><br><span class="line">      <span class="string">&quot;&quot;&quot;Basic AES implementation.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Args:</span></span><br><span class="line"><span class="string">          pt (bytes): Plaintext to encrypt</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Returns:</span></span><br><span class="line"><span class="string">          list: Encrypted Ciphertext formatted as list of bytes</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">      state = self.rows_to_columns(pt)</span><br><span class="line">      self.add_round_key(state, self.ek[<span class="number">0</span>:<span class="number">4</span>]) <span class="comment">#ek is the expanded key</span></span><br><span class="line">      <span class="keyword">for</span> <span class="built_in">round</span> <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">          self.sub_bytes(state)</span><br><span class="line">          self.shift_rows(state)</span><br><span class="line">          self.mix_columns(state)</span><br><span class="line">          self.add_round_key(state, self.ek[<span class="built_in">round</span>*<span class="number">4</span>:(<span class="built_in">round</span>*<span class="number">4</span>)+<span class="number">4</span>])</span><br><span class="line">      self.sub_bytes(state)</span><br><span class="line">      self.shift_rows(state)</span><br><span class="line">      self.add_round_key(state, self.ek[-<span class="number">4</span>:])</span><br><span class="line">      <span class="keyword">return</span> state</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-5.png" alt="upload successful"></p><p>从这张流程图开始分析。原理就不过多坦述，具体可以看看wiki上的介绍。现在只是加强一下算法特征的认识，</p><p>后续逆向过程中，或者开发过程中，好针对性的做出相应措施。</p><p>在AES中，每一个状态都会被列为一个4x4的矩阵，也就是明文，密钥等都会被映射到4X4的矩阵中。</p><p><img src="/images/pasted-6.png" alt="upload successful"></p><p><img src="/images/pasted-7.png" alt="upload successful"></p><p>如果长度超出，就会无限往右扩展。。。。</p><p>上代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES::EncryptBlock</span><span class="params">(<span class="type">const</span> <span class="type">unsigned</span> <span class="type">char</span> in[], <span class="type">unsigned</span> <span class="type">char</span> out[],</span></span></span><br><span class="line"><span class="params"><span class="function">                       <span class="type">unsigned</span> <span class="type">char</span> *roundKeys)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> **state = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span> *[<span class="number">4</span>];</span><br><span class="line">  state[<span class="number">0</span>] = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[<span class="number">4</span> * Nb];</span><br><span class="line">  <span class="type">int</span> i, j, round;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    state[i] = state[<span class="number">0</span>] + Nb * i;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">      state[i][j] = in[i + <span class="number">4</span> * j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">AddRoundKey</span>(state, roundKeys);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (round = <span class="number">1</span>; round &lt;= Nr - <span class="number">1</span>; round++) &#123;</span><br><span class="line">    <span class="built_in">SubBytes</span>(state);</span><br><span class="line">    <span class="built_in">ShiftRows</span>(state);</span><br><span class="line">    <span class="built_in">MixColumns</span>(state);</span><br><span class="line">    <span class="built_in">AddRoundKey</span>(state, roundKeys + round * <span class="number">4</span> * Nb);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">SubBytes</span>(state);</span><br><span class="line">  <span class="built_in">ShiftRows</span>(state);</span><br><span class="line">  <span class="built_in">AddRoundKey</span>(state, roundKeys + Nr * <span class="number">4</span> * Nb);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">      out[i + <span class="number">4</span> * j] = state[i][j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] state[<span class="number">0</span>];</span><br><span class="line">  <span class="keyword">delete</span>[] state;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先第一步就要对密钥K进行变换扩展。</p><p>AES 的扩展密钥是从原始密钥派生的四字节字的列表。数组中的第一个单词与原始键相同。例如，键数组中的前四个字节将是扩展键中的第一个单词，<code>EK</code>，如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]</span><br><span class="line"></span><br><span class="line">expanded_key = [0x00112233,</span><br><span class="line">                0x44556677,</span><br><span class="line">                0x8899aabb,</span><br><span class="line">                0xccddeeff,</span><br><span class="line">                ...]</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-8.png" alt="upload successful"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES::AddRoundKey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **state, <span class="type">unsigned</span> <span class="type">char</span> *key)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">      state[i][j] = state[i][j] ^ key[i + <span class="number">4</span> * j];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进行n-1轮的循环加密</p><ul><li><p>subbytes，字节代换，<strong>字节代换层的主要功能就是让输入的数据通过S_box表完成从一个字节到另一个字节的映射，这里的S_box表是通过某种方法计算出来的，具体的计算方法就不介绍了比较复杂，我们基础部分就只给出计算好的S_box结果。</strong></p><table><thead><tr><th align="center">0</th><th align="center">1</th><th align="center">2</th><th align="center">3</th><th align="center">4</th><th align="center">5</th><th align="center">6</th><th align="center">7</th><th align="center">8</th><th align="center">9</th><th align="center">A</th><th align="center">B</th><th align="center">C</th><th align="center">D</th><th align="center">E</th><th align="center">F</th></tr></thead><tbody><tr><td align="center">0x63</td><td align="center">0x7C</td><td align="center">0x77</td><td align="center">0x7B</td><td align="center">0xF2</td><td align="center">0x6B</td><td align="center">0x6F</td><td align="center">0xC5</td><td align="center">0x30</td><td align="center">0x01</td><td align="center">0x67</td><td align="center">0x2B</td><td align="center">0xFE</td><td align="center">0xD7</td><td align="center">0xAB</td><td align="center">0x76</td></tr><tr><td align="center">0xCA</td><td align="center">0x82</td><td align="center">0xC9</td><td align="center">0x7D</td><td align="center">0xFA</td><td align="center">0x59</td><td align="center">0x47</td><td align="center">0xF0</td><td align="center">0xAD</td><td align="center">0xD4</td><td align="center">0xA2</td><td align="center">0xAF</td><td align="center">0x9C</td><td align="center">0xA4</td><td align="center">0x72</td><td align="center">0xC0</td></tr><tr><td align="center">0xB7</td><td align="center">0xFD</td><td align="center">0x93</td><td align="center">0x26</td><td align="center">0x36</td><td align="center">0x3F</td><td align="center">0xF7</td><td align="center">0xCC</td><td align="center">0x34</td><td align="center">0xA5</td><td align="center">0xE5</td><td align="center">0xF1</td><td align="center">0x71</td><td align="center">0xD8</td><td align="center">0x31</td><td align="center">0x15</td></tr><tr><td align="center">0x04</td><td align="center">0xC7</td><td align="center">0x23</td><td align="center">0xC3</td><td align="center">0x18</td><td align="center">0x96</td><td align="center">0x05</td><td align="center">0x9A</td><td align="center">0x07</td><td align="center">0x12</td><td align="center">0x80</td><td align="center">0xE2</td><td align="center">0xEB</td><td align="center">0x27</td><td align="center">0xB2</td><td align="center">0x75</td></tr><tr><td align="center">0x09</td><td align="center">0x83</td><td align="center">0x2C</td><td align="center">0x1A</td><td align="center">0x1B</td><td align="center">0x6E</td><td align="center">0x5A</td><td align="center">0xA0</td><td align="center">0x52</td><td align="center">0x3B</td><td align="center">0xD6</td><td align="center">0xB3</td><td align="center">0x29</td><td align="center">0xE3</td><td align="center">0x2F</td><td align="center">0x84</td></tr><tr><td align="center">0x53</td><td align="center">0xD1</td><td align="center">0x00</td><td align="center">0xED</td><td align="center">0x20</td><td align="center">0xFC</td><td align="center">0xB1</td><td align="center">0x5B</td><td align="center">0x6A</td><td align="center">0xCB</td><td align="center">0xBE</td><td align="center">0x39</td><td align="center">0x4A</td><td align="center">0x4C</td><td align="center">0x58</td><td align="center">0xCF</td></tr><tr><td align="center">0xD0</td><td align="center">0xEF</td><td align="center">0xAA</td><td align="center">0xFB</td><td align="center">0x43</td><td align="center">0x4D</td><td align="center">0x33</td><td align="center">0x85</td><td align="center">0x45</td><td align="center">0xF9</td><td align="center">0x02</td><td align="center">0x7F</td><td align="center">0x50</td><td align="center">0x3C</td><td align="center">0x9F</td><td align="center">0xA8</td></tr><tr><td align="center">0x51</td><td align="center">0xA3</td><td align="center">0x40</td><td align="center">0x8F</td><td align="center">0x92</td><td align="center">0x9D</td><td align="center">0x38</td><td align="center">0xF5</td><td align="center">0xBC</td><td align="center">0xB6</td><td align="center">0xDA</td><td align="center">0x21</td><td align="center">0x10</td><td align="center">0xFF</td><td align="center">0xF3</td><td align="center">0xD2</td></tr><tr><td align="center">0xCD</td><td align="center">0x0C</td><td align="center">0x13</td><td align="center">0xEC</td><td align="center">0x5F</td><td align="center">0x97</td><td align="center">0x44</td><td align="center">0x17</td><td align="center">0xC4</td><td align="center">0xA7</td><td align="center">0x7E</td><td align="center">0x3D</td><td align="center">0x64</td><td align="center">0x5D</td><td align="center">0x19</td><td align="center">0x73</td></tr><tr><td align="center">0x60</td><td align="center">0x81</td><td align="center">0x4F</td><td align="center">0xDC</td><td align="center">0x22</td><td align="center">0x2A</td><td align="center">0x90</td><td align="center">0x88</td><td align="center">0x46</td><td align="center">0xEE</td><td align="center">0xB8</td><td align="center">0x14</td><td align="center">0xDE</td><td align="center">0x5E</td><td align="center">0x0B</td><td align="center">0xDB</td></tr><tr><td align="center">0xE0</td><td align="center">0x32</td><td align="center">0x3A</td><td align="center">0x0A</td><td align="center">0x49</td><td align="center">0x06</td><td align="center">0x24</td><td align="center">0x5C</td><td align="center">0xC2</td><td align="center">0xD3</td><td align="center">0xAC</td><td align="center">0x62</td><td align="center">0x91</td><td align="center">0x95</td><td align="center">0xE4</td><td align="center">0x79</td></tr><tr><td align="center">0xE7</td><td align="center">0xC8</td><td align="center">0x37</td><td align="center">0x6D</td><td align="center">0x8D</td><td align="center">0xD5</td><td align="center">0x4E</td><td align="center">0xA9</td><td align="center">0x6C</td><td align="center">0x56</td><td align="center">0xF4</td><td align="center">0xEA</td><td align="center">0x65</td><td align="center">0x7A</td><td align="center">0xAE</td><td align="center">0x08</td></tr><tr><td align="center">0xBA</td><td align="center">0x78</td><td align="center">0x25</td><td align="center">0x2E</td><td align="center">0x1C</td><td align="center">0xA6</td><td align="center">0xB4</td><td align="center">0xC6</td><td align="center">0xE8</td><td align="center">0xDD</td><td align="center">0x74</td><td align="center">0x1F</td><td align="center">0x4B</td><td align="center">0xBD</td><td align="center">0x8B</td><td align="center">0x8A</td></tr><tr><td align="center">0x70</td><td align="center">0x3E</td><td align="center">0xB5</td><td align="center">0x66</td><td align="center">0x48</td><td align="center">0x03</td><td align="center">0xF6</td><td align="center">0x0E</td><td align="center">0x61</td><td align="center">0x35</td><td align="center">0x57</td><td align="center">0xB9</td><td align="center">0x86</td><td align="center">0xC1</td><td align="center">0x1D</td><td align="center">0x9E</td></tr><tr><td align="center">0xE1</td><td align="center">0xF8</td><td align="center">0x98</td><td align="center">0x11</td><td align="center">0x69</td><td align="center">0xD9</td><td align="center">0x8E</td><td align="center">0x94</td><td align="center">0x9B</td><td align="center">0x1E</td><td align="center">0x87</td><td align="center">0xE9</td><td align="center">0xCE</td><td align="center">0x55</td><td align="center">0x28</td><td align="center">0xDF</td></tr><tr><td align="center">0x8C</td><td align="center">0xA1</td><td align="center">0x89</td><td align="center">0x0D</td><td align="center">0xBF</td><td align="center">0xE6</td><td align="center">0x42</td><td align="center">0x68</td><td align="center">0x41</td><td align="center">0x99</td><td align="center">0x2D</td><td align="center">0x0F</td><td align="center">0xB0</td><td align="center">0x54</td><td align="center">0xBB</td><td align="center">0x16</td></tr></tbody></table></li></ul><p>逆SBOX自己github找找就行。</p><p><img src="/images/pasted-10.png" alt="upload successful"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES::SubBytes</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **state)</span> </span>&#123;</span><br><span class="line">  <span class="type">int</span> i, j;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> t;</span><br><span class="line">  <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">      t = state[i][j];</span><br><span class="line">      state[i][j] = sbox[t / <span class="number">16</span>][t % <span class="number">16</span>];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ShiftRows行位移，<strong>行位移操作最为简单，它是用来将输入数据作为一个4·4的字节矩阵进行处理的，然后将这个矩阵的字节进行位置上的置换。ShiftRows子层属于AES手动的扩散层，目的是将单个位上的变换扩散到影响整个状态当，从而达到雪崩效应。在加密时行位移处理与解密时的处理相反，我们这里将解密时的处理称作逆行位移。它之所以称作行位移，是因为它只在4·4矩阵的行间进行操作，每行4字节的数据。在加密时，保持矩阵的第一行不变，第二行向左移动8Bit(一个字节)、第三行向左移动2个字节、第四行向左移动3个字节。而在解密时恰恰相反，依然保持第一行不变，将第二行向右移动一个字节、第三行右移2个字节、第四行右移3个字节。操作结束！</strong></li></ul><p><img src="/images/pasted-11.png" alt="upload successful"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES::ShiftRow</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **state, <span class="type">int</span> i,</span></span></span><br><span class="line"><span class="params"><span class="function">                   <span class="type">int</span> n)</span>  <span class="comment">// shift row i on n positions</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> *tmp = <span class="keyword">new</span> <span class="type">unsigned</span> <span class="type">char</span>[Nb];</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; Nb; j++) &#123;</span><br><span class="line">    tmp[j] = state[i][(j + n) % Nb];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">memcpy</span>(state[i], tmp, Nb * <span class="built_in">sizeof</span>(<span class="type">unsigned</span> <span class="type">char</span>));</span><br><span class="line"></span><br><span class="line">  <span class="keyword">delete</span>[] tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES::ShiftRows</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **state)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">ShiftRow</span>(state, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="built_in">ShiftRow</span>(state, <span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="built_in">ShiftRow</span>(state, <span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Mixcolums列混淆,MixColumns 将对状态中的每一列执行矩阵乘法。这里的乘法也像 Key Expansion 函数一样使用伽罗瓦域。我设法从用户<a href="https://gist.github.com/lovasoa/a0b384ca0e9c0a485f212caab68d98ec#file-aes-py-L121"> lovasoa</a>的 GitHub 中找到了该算法的纯 Python 实现，如下所示：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">gmul</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Special AES function used for multiplication</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Args:</span></span><br><span class="line"><span class="string">        a (int): Integer to multiply</span></span><br><span class="line"><span class="string">        b (int): Integer to multiply</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Returns:</span></span><br><span class="line"><span class="string">        int: The product of the values</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    p = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        <span class="keyword">if</span> b &amp; <span class="number">1</span>:</span><br><span class="line">            p ^= a</span><br><span class="line">        a &lt;&lt;= <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> a &amp; <span class="number">0x100</span>:</span><br><span class="line">            a ^= <span class="number">0x11b</span></span><br><span class="line">        b &gt;&gt;= <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> p</span><br></pre></td></tr></table></figure><p>矩阵乘法如下所示：</p><p>整个函数可以显示为以下 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">mix_columns</span>(<span class="params">self, state</span>):</span><br><span class="line">      <span class="string">&quot;&quot;&quot;AES MixColumns Method.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">      Args:</span></span><br><span class="line"><span class="string">          state (list): AES State</span></span><br><span class="line"><span class="string">      &quot;&quot;&quot;</span></span><br><span class="line">      <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">          a = state[i]</span><br><span class="line">          b = state[i+<span class="number">4</span>]</span><br><span class="line">          c = state[i+<span class="number">8</span>]</span><br><span class="line">          d = state[i+<span class="number">12</span>]</span><br><span class="line">          state[i] = gmul(<span class="number">2</span>, a) ^ gmul(<span class="number">3</span>, b) ^ c ^ d</span><br><span class="line">          state[i+<span class="number">4</span>] = a ^ gmul(<span class="number">2</span>, b) ^ gmul(<span class="number">3</span>, c) ^ d</span><br><span class="line">          state[i+<span class="number">8</span>] = a ^ b ^ gmul(<span class="number">2</span>, c) ^ gmul(<span class="number">3</span>, d)</span><br><span class="line">          state[i+<span class="number">12</span>] = gmul(<span class="number">3</span>, a) ^ b ^ c ^ gmul(<span class="number">2</span>, d)</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-12.png" alt="upload successful"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">AES::MixColumns</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> **state)</span> </span>&#123;</span><br><span class="line">  <span class="type">unsigned</span> <span class="type">char</span> temp_state[<span class="number">4</span>][<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">memset</span>(temp_state[i], <span class="number">0</span>, <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; ++k) &#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">size_t</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span>; ++j) &#123;</span><br><span class="line">        <span class="keyword">if</span> (CMDS[i][k] == <span class="number">1</span>)</span><br><span class="line">          temp_state[i][j] ^= state[k][j];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">          temp_state[i][j] ^= GF_MUL_TABLE[CMDS[i][k]][state[k][j]];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">memcpy</span>(state[i], temp_state[i], <span class="number">4</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>AddRoundKey加固键，AES 中的 AddRoundKey 函数将通过状态的每一列对扩展密钥的一部分进行异或。</li></ul><p><img src="/images/pasted-13.png" alt="upload successful"></p><p>最后一轮：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">SubBytes</span>(state);</span><br><span class="line"><span class="built_in">ShiftRows</span>(state);</span><br><span class="line"><span class="built_in">AddRoundKey</span>(state, roundKeys + Nr * <span class="number">4</span> * Nb);</span><br></pre></td></tr></table></figure><h2 id="AEST表"><a href="#AEST表" class="headerlink" title="AEST表"></a>AEST表</h2><p>这个表示干嘛的呢，一张图显示。</p><p><img src="/images/pasted-14.png" alt="upload successful"></p><p>有时候在逆向的时候，往往会出现很多这样的表，一般都是5张左右，都是sbox生成的加速表，用来加速aes加解密计算的。</p><h3 id="AES-查找表-T-Table-方法"><a href="#AES-查找表-T-Table-方法" class="headerlink" title="AES 查找表 (T-Table) 方法"></a>AES 查找表 (T-Table) 方法</h3><p>为了提高 AES 算法的效率，MixColumns、ShiftRows 和 SubBytes 函数被组合成一个使用五个查找表的操作。密钥扩展算法与原始 AES 算法相同，状态被视为普通数组而不是 4x4 矩阵。</p><h3 id="查找表生成"><a href="#查找表生成" class="headerlink" title="查找表生成"></a>查找表生成</h3><p>前四个查找表 (T-Tables) 是通过将 S-Box 的每个字节乘以 MixColumns 函数中使用的矩阵来生成的。这将创建四个包含 256 个四字节字的表。它们可以使用以下算法生成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">T1 = &#123;S[i] * 2, S[i], S[i], S[i] * 3&#125;</span><br><span class="line">T2 = &#123;S[i] * 3, S[i] * 2, S[i], S[i]&#125;</span><br><span class="line">T3 = &#123;S[i], S[i] *  3, S[i] * 2, S[i]&#125;</span><br><span class="line">T4 = &#123;S[i], S[i], S[i] * 3, S[i] * 2&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/pasted-15.png" alt="upload successful"></p><p>最终的 T-Table 将 S-Box 的每个字节组合成一个四字节的字，并且仅在最后一轮加密期间使用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Final T-Table generation</span><br><span class="line">T5 = &#123;S[i], S[i], S[i], S[i]&#125;</span><br></pre></td></tr></table></figure><p>查找表的整个生成过程可能类似于以下 Python 代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_t_tables</span>(<span class="params">self</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Generates the tables used for the AES lookup table method.&quot;&quot;&quot;</span></span><br><span class="line">    self.t1 = []</span><br><span class="line">    self.t2 = []</span><br><span class="line">    self.t3 = []</span><br><span class="line">    self.t4 = []</span><br><span class="line">    self.t5 = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(self.SBOX)):</span><br><span class="line">        word1 = [gmul(self.SBOX[i], <span class="number">2</span>), self.SBOX[i],</span><br><span class="line">                 self.SBOX[i], gmul(self.SBOX[i], <span class="number">3</span>)]</span><br><span class="line">        word2 = [gmul(self.SBOX[i], <span class="number">3</span>), gmul(self.SBOX[i], <span class="number">2</span>),</span><br><span class="line">                 self.SBOX[i], self.SBOX[i]]</span><br><span class="line">        word3 = [self.SBOX[i], gmul(self.SBOX[i], <span class="number">3</span>),</span><br><span class="line">                 gmul(self.SBOX[i], <span class="number">2</span>), self.SBOX[i]]</span><br><span class="line">        word4 = [self.SBOX[i], self.SBOX[i],</span><br><span class="line">                 gmul(self.SBOX[i], <span class="number">3</span>), gmul(self.SBOX[i], <span class="number">2</span>)]</span><br><span class="line">        word5 = [self.SBOX[i]] * <span class="number">4</span></span><br><span class="line">        self.t1.append(struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">bytes</span>(word1))[<span class="number">0</span>])</span><br><span class="line">        self.t2.append(struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">bytes</span>(word2))[<span class="number">0</span>])</span><br><span class="line">        self.t3.append(struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">bytes</span>(word3))[<span class="number">0</span>])</span><br><span class="line">        self.t4.append(struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">bytes</span>(word4))[<span class="number">0</span>])</span><br><span class="line">        self.t5.append(struct.unpack(<span class="string">&#x27;&gt;I&#x27;</span>, <span class="built_in">bytes</span>(word5))[<span class="number">0</span>])</span><br></pre></td></tr></table></figure><h3 id="回合加密"><a href="#回合加密" class="headerlink" title="回合加密"></a>回合加密</h3><p>对于每一轮加密，AES T-Table 算法将对原始明文数组索引处的四个查找表的一个字节进行异或。例如，一个普通的回合看起来像下面的伪代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">A[<span class="number">0</span>] = PT[<span class="number">0</span>:<span class="number">4</span>] ^ W[<span class="number">0</span>]</span><br><span class="line">A[<span class="number">1</span>] = PT[<span class="number">4</span>:<span class="number">8</span>] ^ W[<span class="number">1</span>]</span><br><span class="line">A[<span class="number">2</span>] = PT[<span class="number">8</span>:<span class="number">12</span>] ^ W[<span class="number">2</span>]</span><br><span class="line">A[<span class="number">3</span>] = PT[<span class="number">12</span>:<span class="number">16</span>] ^ W[<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line">K = <span class="number">4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> round in NUM_ROUNDS:</span><br><span class="line">  S[<span class="number">0</span>:<span class="number">4</span>] = A[<span class="number">0</span>] # Convert word to bytes</span><br><span class="line">  S[<span class="number">4</span>:<span class="number">8</span>] = A[<span class="number">1</span>]</span><br><span class="line">  S[<span class="number">8</span>:<span class="number">12</span>] = A[<span class="number">2</span>]</span><br><span class="line">  S[<span class="number">12</span>:<span class="number">16</span>] = A[<span class="number">3</span>]</span><br><span class="line">  A[<span class="number">0</span>] = T1[S[<span class="number">0</span>]] ^ T2[S[<span class="number">5</span>]] ^ T3[S[<span class="number">10</span>]] ^ T4[S[<span class="number">15</span>]] ^ W[K+<span class="number">0</span>]</span><br><span class="line">  A[<span class="number">1</span>] = T1[S[<span class="number">4</span>]] ^ T2[S[<span class="number">9</span>]] ^ T3[S[<span class="number">14</span>]] ^ T4[S[<span class="number">3</span>]] ^ W[K+<span class="number">1</span>]</span><br><span class="line">  A[<span class="number">2</span>] = T1[S[<span class="number">8</span>]] ^ T2[S[<span class="number">13</span>]] ^ T3[S[<span class="number">2</span>]] ^ T4[S[<span class="number">7</span>]] ^ W[K+<span class="number">2</span>]</span><br><span class="line">  A[<span class="number">3</span>] = T1[S[<span class="number">12</span>]] ^ T2[S[<span class="number">1</span>]] ^ T3[S[<span class="number">6</span>]] ^ T4[S[<span class="number">11</span>]] ^ W[K+<span class="number">3</span>]</span><br></pre></td></tr></table></figure><p>此方法比调用单独的 SubBytes、ShiftRows 和 MixColumns 函数更有效，因为它是一步完成的。一次组合所有方法时，无需执行多个循环或函数调用。</p><h3 id="最后一轮"><a href="#最后一轮" class="headerlink" title="最后一轮"></a>最后一轮</h3><p>最后一轮加密类似于普通轮，除了它使用第五个 T-Table 并且每个 XOR 都附加到密文中。下面的伪代码演示了这个过程：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CT[<span class="number">0</span>:<span class="number">4</span>] = T5[S[<span class="number">0</span>]] ^ T5[S[<span class="number">5</span>]] ^ T5[S[<span class="number">10</span>]] ^ T5[S[<span class="number">15</span>]] ^ W[K+<span class="number">0</span>]</span><br><span class="line">CT[<span class="number">4</span>:<span class="number">8</span>] = T5[S[<span class="number">4</span>]] ^ T5[S[<span class="number">9</span>]] ^ T5[S[<span class="number">14</span>]] ^ T5[S[<span class="number">3</span>]] ^ W[K+<span class="number">1</span>]</span><br><span class="line">CT[<span class="number">8</span>:<span class="number">12</span>] = T5[S[<span class="number">8</span>]] ^ T5[S[<span class="number">13</span>]] ^ T5[S[<span class="number">2</span>]] ^ T5[S[<span class="number">7</span>]] ^ W[K+<span class="number">2</span>]</span><br><span class="line">CT[<span class="number">12</span>:<span class="number">16</span>] = T5[S[<span class="number">12</span>]] ^ T5[S[<span class="number">1</span>]] ^ T5[S[<span class="number">6</span>]] ^ T5[S[<span class="number">11</span>]] ^ W[K+<span class="number">3</span>]</span><br></pre></td></tr></table></figure><h3 id="AES-T-表-Python-代码"><a href="#AES-T-表-Python-代码" class="headerlink" title="AES T 表 Python 代码"></a>AES T 表 Python 代码</h3><p>AES T-Table 实现的完整代码如下所示：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">def <span class="title">cipher_t_table</span><span class="params">(self, pt)</span>:</span></span><br><span class="line"><span class="function">    <span class="string">&quot;&quot;</span><span class="string">&quot;Lookup Table AES implementation.</span></span></span><br><span class="line"><span class="string"><span class="function"></span></span></span><br><span class="line"><span class="string"><span class="function">    Args:</span></span></span><br><span class="line"><span class="string"><span class="function">        pt (bytes): Plaintext to encrypt</span></span></span><br><span class="line"><span class="string"><span class="function"></span></span></span><br><span class="line"><span class="string"><span class="function">    Returns:</span></span></span><br><span class="line"><span class="string"><span class="function">        bytes: Encrypted Ciphertext</span></span></span><br><span class="line"><span class="string"><span class="function">    &quot;</span><span class="string">&quot;&quot;</span></span></span><br><span class="line"><span class="function">    ct =</span> []</span><br><span class="line">    a = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    <span class="meta"># t is a temporary array to avoid us changing array a while performing the algorithm</span></span><br><span class="line">    t = [<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">    a[<span class="number">0</span>] = <span class="keyword">struct</span>.<span class="built_in">unpack</span>(<span class="string">&#x27;&gt;I&#x27;</span>, pt[<span class="number">0</span>:<span class="number">4</span>])[<span class="number">0</span>] ^ self.ek[<span class="number">0</span>]</span><br><span class="line">    a[<span class="number">1</span>] = <span class="keyword">struct</span>.<span class="built_in">unpack</span>(<span class="string">&#x27;&gt;I&#x27;</span>, pt[<span class="number">4</span>:<span class="number">8</span>])[<span class="number">0</span>] ^ self.ek[<span class="number">1</span>]</span><br><span class="line">    a[<span class="number">2</span>] = <span class="keyword">struct</span>.<span class="built_in">unpack</span>(<span class="string">&#x27;&gt;I&#x27;</span>, pt[<span class="number">8</span>:<span class="number">12</span>])[<span class="number">0</span>] ^ self.ek[<span class="number">2</span>]</span><br><span class="line">    a[<span class="number">3</span>] = <span class="keyword">struct</span>.<span class="built_in">unpack</span>(<span class="string">&#x27;&gt;I&#x27;</span>, pt[<span class="number">12</span>:<span class="number">16</span>])[<span class="number">0</span>] ^ self.ek[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line">    <span class="keyword">for</span> round in <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10</span>):</span><br><span class="line">        <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">            # Using binary rotation instead of splitting words into array</span><br><span class="line">            t[i] = (self.t1[(a[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                    self.t2[(a[(i + <span class="number">1</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                    self.t3[(a[(i + <span class="number">2</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                    self.t4[(a[(i + <span class="number">3</span>) % <span class="number">4</span>]) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                    self.ek[(round*<span class="number">4</span>)+i])</span><br><span class="line">        a = t.<span class="built_in">copy</span>()</span><br><span class="line"></span><br><span class="line">    # Final round of encryption</span><br><span class="line">    <span class="keyword">for</span> i in <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">        ct.<span class="built_in">append</span>(self.SBOX[(a[i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                  ((self.ek[<span class="number">-4</span>+i] &gt;&gt; <span class="number">24</span>) &amp; <span class="number">0xff</span>))</span><br><span class="line">        ct.<span class="built_in">append</span>(self.SBOX[(a[(i + <span class="number">1</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                  ((self.ek[<span class="number">-4</span>+i] &gt;&gt; <span class="number">16</span>) &amp; <span class="number">0xff</span>))</span><br><span class="line">        ct.<span class="built_in">append</span>(self.SBOX[(a[(i + <span class="number">2</span>) % <span class="number">4</span>] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                  ((self.ek[<span class="number">-4</span>+i] &gt;&gt; <span class="number">8</span>) &amp; <span class="number">0xff</span>))</span><br><span class="line">        ct.<span class="built_in">append</span>(self.SBOX[(a[(i + <span class="number">3</span>) % <span class="number">4</span>]) &amp; <span class="number">0xff</span>] ^</span><br><span class="line">                  ((self.ek[<span class="number">-4</span>+i]) &amp; <span class="number">0xff</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">bytes</span>(ct)</span><br></pre></td></tr></table></figure><h2 id="AES分析和魔改"><a href="#AES分析和魔改" class="headerlink" title="AES分析和魔改"></a>AES分析和魔改</h2><p>参考：<a href="https://github.com/SergeyBel/AES/blob/master/src/AES.cpp">https://github.com/SergeyBel/AES/blob/master/src/AES.cpp</a></p><p>写了个ndk的demo，逆向分析一下在so层里面的逻辑。</p><p><img src="/images/pasted-16.png" alt="upload successful"><br>这是ida解析的伪代码。</p><p>对于我们要在实际逆向应用中，快速定位，一般都是会把这些符号表去掉的，没有那个蠢逼会傻傻的把函数名给你看。</p><ol><li>借助ida的findcrypt插件，一键识别位置。</li></ol><p><img src="/images/pasted-17.png" alt="upload successful"></p><ol start="2"><li><p>搜寻不到的时候，盯着sbox表，用010搜索特征值，比如0x63,0x7c等等….</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000</span>108B6 loc_108B6                               ; CODE XREF: AES::SubBytes(uchar **)+<span class="number">28</span>↑j</span><br><span class="line">.text:<span class="number">000</span>108B6                 LDR             R0, [SP,<span class="comment">#0x18+var_8]</span></span><br><span class="line">.text:<span class="number">000</span>108B8                 LDR             R1, [SP,<span class="comment">#0x18+var_C]</span></span><br><span class="line">.text:<span class="number">000</span>108BA                 LDR.W           R0, [R0,R1,LSL<span class="comment">#2]</span></span><br><span class="line">.text:<span class="number">000</span>108BE                 LDR             R1, [SP,<span class="comment">#0x18+var_10]</span></span><br><span class="line">.text:<span class="number">000</span>108C0                 LDRB            R0, [R0,R1]</span><br><span class="line">.text:<span class="number">000</span>108C2                 STRB.W          R0, [SP,<span class="comment">#0x18+var_11]</span></span><br><span class="line">.text:<span class="number">000</span>108C6                 LDRB.W          R0, [SP,<span class="comment">#0x18+var_11]</span></span><br><span class="line">.text:<span class="number">000</span>108CA                 AND.W           R1, R0, <span class="comment">#0xF0</span></span><br><span class="line">.text:<span class="number">000</span>108CE                 LDR             R2, =(RijnDael_AES_LONG_2518C - <span class="number">0x108D4</span>)</span><br><span class="line">.text:<span class="number">000</span>108D0                 ADD             R2, PC  ; RijnDael_AES_LONG_2518C  sbox表</span><br><span class="line">.text:<span class="number">000</span>108D2                 ADD             R1, R2</span><br><span class="line">.text:<span class="number">000</span>108D4                 AND.W           R0, R0, <span class="comment">#0xF</span></span><br><span class="line">.text:<span class="number">000</span>108D8                 LDRB            R0, [R1,R0]</span><br><span class="line">.text:<span class="number">000</span>108DA                 LDR             R1, [SP,<span class="comment">#0x18+var_8]</span></span><br><span class="line">.text:<span class="number">000</span>108DC                 LDR             R2, [SP,<span class="comment">#0x18+var_C]</span></span><br><span class="line">.text:<span class="number">000</span>108DE                 LDR.W           R1, [R1,R2,LSL<span class="comment">#2]</span></span><br><span class="line">.text:<span class="number">000108E2</span>                 LDR             R2, [SP,<span class="comment">#0x18+var_10]</span></span><br><span class="line">.text:<span class="number">000108E4</span>                 STRB            R0, [R1,R2]</span><br><span class="line">.text:<span class="number">000108E6</span>                 B               loc_108E8</span><br><span class="line">.text:<span class="number">000108E8</span> ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li><li><p>搜索aes的key，一般来说aes的key是最重要的。那么首先找到密钥扩展这个地方，因为传参一定有key。后续分析别的app时，会详细讲讲，这里先说说思路。一般拿捏不定，可以trace(埋坑，后续讲)。</p><ul><li>addroundkey时，会将明文和key进行异或</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000</span>10858 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000</span>10858</span><br><span class="line">.text:<span class="number">000</span>10858 loc_10858                               ; CODE XREF: AES::AddRoundKey(uchar **,uchar *)+2A↑j</span><br><span class="line">.text:<span class="number">000</span>10858                 LDR             R0, [SP,<span class="comment">#0x18+var_8]</span></span><br><span class="line">.text:<span class="number">000</span>1085A                 LDR             R1, [SP,<span class="comment">#0x18+var_10]</span></span><br><span class="line">.text:<span class="number">000</span>1085C                 LDR.W           R0, [R0,R1,LSL<span class="comment">#2]</span></span><br><span class="line">.text:<span class="number">000</span>10860                 LDR             R2, [SP,<span class="comment">#0x18+var_14]</span></span><br><span class="line">.text:<span class="number">000</span>10862                 LDRB            R3, [R0,R2]</span><br><span class="line">.text:<span class="number">000</span>10864                 LDR.W           R12, [SP,<span class="comment">#0x18+var_C]</span></span><br><span class="line">.text:<span class="number">000</span>10868                 ADD.W           R1, R1, R2,LSL<span class="comment">#2</span></span><br><span class="line">.text:<span class="number">000</span>1086C                 LDRB.W          R1, [R12,R1]</span><br><span class="line">.text:<span class="number">000</span>10870                 EORS            R1, R3  这里汇编指令^</span><br><span class="line">.text:<span class="number">000</span>10872                 STRB            R1, [R0,R2]</span><br><span class="line">.text:<span class="number">000</span>10874                 B               loc_10876</span><br><span class="line">.text:<span class="number">000</span>10876 ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure><ul><li><p>mixcolums列混合时，几个关键的常量：0x02, 0x01, 0x01, 0x03</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.text:<span class="number">000</span>10A18 ; ---------------------------------------------------------------------------</span><br><span class="line">.text:<span class="number">000</span>10A18</span><br><span class="line">.text:<span class="number">000</span>10A18 loc_10A18                               ; CODE XREF: AES::MixColumns(uchar **)+B0↑j</span><br><span class="line">.text:<span class="number">000</span>10A18                 LDR             R0, [SP,<span class="comment">#0x70+var_5C]</span></span><br><span class="line">.text:<span class="number">000</span>10A1A                 LDR             R1, =(byte_2528C - <span class="number">0x10A20</span>)</span><br><span class="line">.text:<span class="number">000</span>10A1C                 ADD             R1, PC  ; byte_2528C</span><br><span class="line">.text:<span class="number">000</span>10A1E                 ADD.W           R1, R1, R0,LSL<span class="comment">#2</span></span><br><span class="line">.text:<span class="number">000</span>10A22                 LDR             R2, [SP,<span class="comment">#0x70+var_60]</span></span><br><span class="line">.text:<span class="number">000</span>10A24                 LDRB            R1, [R1,R2]</span><br><span class="line">.text:<span class="number">000</span>10A26                 LDR             R3, =(byte_2529C - <span class="number">0x10A2C</span>)</span><br><span class="line">.text:<span class="number">000</span>10A28                 ADD             R3, PC  ; byte_2529C</span><br><span class="line">.text:<span class="number">000</span>10A2A                 ADD.W           R1, R3, R1,LSL<span class="comment">#8</span></span><br><span class="line">.text:<span class="number">000</span>10A2E                 LDR             R3, [SP,<span class="comment">#0x70+var_54]</span></span><br><span class="line">.text:<span class="number">000</span>10A30                 LDR.W           R2, [R3,R2,LSL<span class="comment">#2]</span></span><br><span class="line">.text:<span class="number">000</span>10A34                 LDR             R3, [SP,<span class="comment">#0x70+var_64]</span></span><br><span class="line">.text:<span class="number">000</span>10A36                 LDRB            R2, [R2,R3]</span><br><span class="line">.text:<span class="number">000</span>10A38                 LDRB            R1, [R1,R2]</span><br><span class="line">.text:<span class="number">000</span>10A3A                 ADD             R2, SP, <span class="comment">#0x70+var_1C</span></span><br><span class="line">.text:<span class="number">000</span>10A3C                 ADD.W           R0, R2, R0,LSL<span class="comment">#2</span></span><br><span class="line">.text:<span class="number">000</span>10A40                 LDRB            R2, [R0,R3]</span><br><span class="line">.text:<span class="number">000</span>10A42                 EORS            R1, R2</span><br><span class="line">.text:<span class="number">000</span>10A44                 STRB            R1, [R0,R3]</span><br><span class="line">.text:<span class="number">000</span>10A46                 B               loc_10A48</span><br><span class="line">.text:<span class="number">000</span>10A48 ; ---------------------------------------------------------------------------</span><br></pre></td></tr></table></figure></li></ul><p>参考：</p><p><strong>TeslaCrypt勒索软件中的AES算法识别</strong>：<a href="https://cloud.tencent.com/developer/article/1040293">https://cloud.tencent.com/developer/article/1040293</a></p><p><strong>aes在cutter中识别</strong>：<a href="https://www.goggleheadedhacker.com/blog/post/reversing-crypto-functions-aes#key-expansion">https://www.goggleheadedhacker.com/blog/post/reversing-crypto-functions-aes#key-expansion</a></p></li></ol><p>上面说到的几个点，aes魔改起来，就有太多地方了，但是现在cpu都对aes有加速处理，故此修改一些常量是最简单的。亦如RCON，密钥扩展函数运算等等。</p><p>如果不考虑算法被攻破的可能性，可缩减n-1的轮数。</p><p>但如果对自己的程序不自信的话，这个时候可以牺牲点性能，采取白盒aes加密的方法，这套强度特别高。</p><p>后续放分析过程…</p>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ollvm介绍</title>
      <link href="/2022/07/18/ollvm_1/"/>
      <url>/2022/07/18/ollvm_1/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是OLLVM？"><a href="#什么是OLLVM？" class="headerlink" title="什么是OLLVM？"></a>什么是OLLVM？</h1>]]></content>
      
      
      <categories>
          
          <category> msec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msec </tag>
            
            <tag> ollvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java_obf</title>
      <link href="/2022/07/18/java-obf/"/>
      <url>/2022/07/18/java-obf/</url>
      
        <content type="html"><![CDATA[<h1 id="安卓java层混淆"><a href="#安卓java层混淆" class="headerlink" title="安卓java层混淆"></a>安卓java层混淆</h1><p>对于一个应用release包来说，存在混淆效果是十分正常的。添加混淆不仅能够使用无意义的命名去重新命名类、方法及变量，使得应用代码被混淆难以反编译及进行逆向工程，同时在一定程度上还能够减小包的大小。</p><p>在Android里面，由于我们常用的IDE:Android Studio集成了ProGuard，因此我们最常用，最简单的混淆是ProGuard混淆。ProGuard混淆主要包括有四个功能：</p><ol><li>压缩（Shrink）:用于检测和删除没有使用的类、字段、方法和属性。</li><li>优化（Optimize）:对于字节码进行优化，并且移除无用指令。</li><li>混淆（Obfuscate）:使用a,b,c等名称对类，字段和方法进行重命名。</li><li>预检（Preverify）:主要是在Java平台上对处理后的代码进行预检。</li></ol><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>Android Studio中集成了ProGuard，因此在项目中默认配置了proguard-rules.pro文件，我们可以直接修改此文件。</p><p>Android Studio使用ProGuard主要包括如下几个步骤：</p><ol><li>配置文件中打开混淆。</li><li>配置混淆文件。</li><li>检查日志文件，apk文件以及apk运行状况，查询是否有错误出现。</li></ol><h4 id="一-配置文件中打开混淆"><a href="#一-配置文件中打开混淆" class="headerlink" title="一. 配置文件中打开混淆"></a>一. 配置文件中打开混淆</h4><p>在build.gradle文件中配置如下代码：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">android &#123;</span><br><span class="line">    buildTypes &#123;</span><br><span class="line">    debug &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        release &#123;</span><br><span class="line">            <span class="comment">//混淆开关</span></span><br><span class="line">            minifyEnabled <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 是否zip对齐</span></span><br><span class="line">            zipAlignEnabled <span class="literal">true</span></span><br><span class="line">            <span class="comment">// 移除无用的resource文件</span></span><br><span class="line">            shrinkResources <span class="literal">false</span></span><br><span class="line">            <span class="comment">// 是否打开debuggable开关</span></span><br><span class="line">            debuggable <span class="literal">false</span></span><br><span class="line">            <span class="comment">// 是否打开jniDebuggable开关</span></span><br><span class="line">            jniDebuggable <span class="literal">false</span></span><br><span class="line">            proguardFiles <span class="string">&#x27;proguard-rules.pro&#x27;</span></span><br><span class="line">            signingConfig signingConfigs.release</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码中可以看到配置混淆开关的是<code>minifyEnabled</code>,设置为true可以打开混淆。</p><p>混淆一般是配置在release包中，原因是因为debug包一般来说是开发者在开发需要时运行调试的，混淆会减慢打包速度，对于开发程序效率有所影响。但是这不表示我们在开发程序时不注重混淆设置，在混淆设置不正确的情况下可能会发生查找不到某个类的异常，因此如果项目中有打开混淆，在需求完成后添加混淆并自测是必要步骤。</p><p>在配置文件proguard-rules.pro中，这套基本都是通用的了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"># Add project specific ProGuard rules here.</span><br><span class="line"># You can control the set of applied configuration files using the</span><br><span class="line"># proguardFiles setting in build.gradle.</span><br><span class="line">#</span><br><span class="line"># For more details, see</span><br><span class="line">#   http:<span class="comment">//developer.android.com/guide/developing/tools/proguard.html</span></span><br><span class="line"></span><br><span class="line"># If your project uses WebView with JS, uncomment the following</span><br><span class="line"># and specify the fully qualified <span class="keyword">class</span> <span class="title class_">name</span> to the JavaScript interface</span><br><span class="line"># class:</span><br><span class="line">#-keepclassmembers <span class="keyword">class</span> <span class="title class_">fqcn</span>.of.javascript.interface.<span class="keyword">for</span>.webview &#123;</span><br><span class="line">#   <span class="keyword">public</span> *;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"># Uncomment <span class="built_in">this</span> to preserve the line number information <span class="keyword">for</span></span><br><span class="line"># debugging stack traces.</span><br><span class="line">#-keepattributes SourceFile,LineNumberTable</span><br><span class="line"></span><br><span class="line"># If you keep the line number information, uncomment <span class="built_in">this</span> to</span><br><span class="line"># hide the original source file name.</span><br><span class="line">#-renamesourcefileattribute SourceFile</span><br><span class="line"></span><br><span class="line">#指定压缩级别</span><br><span class="line">-optimizationpasses <span class="number">5</span></span><br><span class="line"></span><br><span class="line">#不跳过非公共的库的类成员</span><br><span class="line">-dontskipnonpubliclibraryclassmembers</span><br><span class="line"></span><br><span class="line">#混淆时采用的算法</span><br><span class="line">-optimizations !code/simplification/arithmetic,!field<span class="comment">/*,!class/merging/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#把混淆类中的方法名也混淆了</span></span><br><span class="line"><span class="comment">-useuniqueclassmembernames</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#指定不去忽略非公共的库的类</span></span><br><span class="line"><span class="comment">-dontskipnonpubliclibraryclasses</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#不做预检验，preverify是proguard的四大步骤之一,可以加快混淆速度</span></span><br><span class="line"><span class="comment">#-dontpreverify</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 忽略警告（？）</span></span><br><span class="line"><span class="comment">#-ignorewarnings</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#混淆时不使用大小写混合，混淆后的类名为小写(大小写混淆容易导致class文件相互覆盖）</span></span><br><span class="line"><span class="comment">-dontusemixedcaseclassnames</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#优化时允许访问并修改有修饰符的类和类的成员</span></span><br><span class="line"><span class="comment">-allowaccessmodification</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">#将文件来源重命名为“SourceFile”字符串</span></span><br><span class="line"><span class="comment">#-renamesourcefileattribute SourceFile</span></span><br><span class="line"><span class="comment">#保留行号</span></span><br><span class="line"><span class="comment">-keepattributes SourceFile,LineNumberTable</span></span><br><span class="line"><span class="comment">#保持泛型</span></span><br><span class="line"><span class="comment">-keepattributes Signature</span></span><br><span class="line"><span class="comment"># 保持注解</span></span><br><span class="line"><span class="comment">-keepattributes *Annotation*,InnerClasses</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 保持测试相关的代码</span></span><br><span class="line"><span class="comment">-dontnote junit.framework.**</span></span><br><span class="line"><span class="comment">-dontnote junit.runner.**</span></span><br><span class="line"><span class="comment">-dontwarn android.test.**</span></span><br><span class="line"><span class="comment">-dontwarn android.support.test.**</span></span><br><span class="line"><span class="comment">-dontwarn org.junit.**</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"># 混淆字典</span></span><br><span class="line"><span class="comment">-obfuscationdictionary dic.txt</span></span><br><span class="line"><span class="comment">-classobfuscationdictionary dic.txt</span></span><br><span class="line"><span class="comment">-packageobfuscationdictionary dic.txt</span></span><br></pre></td></tr></table></figure><p>—————-以上摘自：<a href="https://www.jianshu.com/p/e01f547979bb">https://www.jianshu.com/p/e01f547979bb</a> ———————</p><p>配置目录截图：</p><p><img src="/images/pasted-2.png" alt="upload successful"></p><p>其中dic.txt的生成脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># encoding: utf-8</span></span><br><span class="line"><span class="comment"># 混淆字典生成</span></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line">length = <span class="number">10</span></span><br><span class="line">result = <span class="built_in">set</span>()</span><br><span class="line"></span><br><span class="line">keys = [<span class="string">&quot;U&quot;</span>,<span class="string">&quot;v&quot;</span>,<span class="string">&quot;V&quot;</span>,<span class="string">&quot;u&quot;</span>]</span><br><span class="line"><span class="comment">#也可以使用 I，i，L，l，1这种。</span></span><br><span class="line"><span class="comment">#因开发者而异，怎么恶心怎么来</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> o <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    <span class="comment"># 长度 7- 13 位</span></span><br><span class="line">    <span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">6</span>,<span class="number">13</span>):</span><br><span class="line">        <span class="comment"># 按照长度随机拼接</span></span><br><span class="line">        temp = keys[random.randint(<span class="number">0</span>,<span class="number">1</span>)]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, length+<span class="number">1</span>):</span><br><span class="line">            temp += random.choice(keys)</span><br><span class="line">        result.add(temp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;成功生成字典，数量：&quot;</span>, <span class="built_in">len</span>(result))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;dic.txt&quot;</span>,mode=<span class="string">&#x27;w+&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.writelines(<span class="string">&quot;\n&quot;</span>.join(result))</span><br><span class="line">    f.flush()</span><br></pre></td></tr></table></figure><p>混淆之前，反编译出来的代码基本和源码一样。很容易被窥探代码逻辑。<br><img src="/images/pasted-1.png" alt="upload successful"></p><p>混淆成功之后，混乱不堪。<br><img src="/images/pasted-0.png" alt="upload successful"></p><p>但是字符串还是没混淆，通过一些特征还是可以分析的。<br>之前用过stringfog这个工具，后来由于没怎么更新，不兼容新的gradle版本，因此也没时间二次开发。</p><p>有能力的可进行stringfog的二次开发，原理都一样，据所知某些加固产品，也是基于这些方法实现。</p><p>StringFOG: <a href="https://github.com/MegatronKing/StringFog">https://github.com/MegatronKing/StringFog</a></p><p><a href="https://github.com/MichaelRocks/paranoid">https://github.com/MichaelRocks/paranoid</a>  用<strong>paranoid</strong>代替。<br><strong>优点：兼容性高，灵活配置</strong><br><strong>缺点：不能全局加密，只能选择某个class下的字符串加密</strong></p><p>具体配置如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">In order to make Paranoid work with your project you have to apply the Paranoid Gradle plugin to the project. Please notice that the Paranoid plugin must be applied after the Android plugin.</span><br><span class="line"></span><br><span class="line">buildscript &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  dependencies &#123;</span><br><span class="line">    classpath <span class="string">&#x27;io.michaelrocks:paranoid-gradle-plugin:0.3.7&#x27;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">apply plugin: <span class="string">&#x27;com.android.application&#x27;</span></span><br><span class="line">apply plugin: <span class="string">&#x27;io.michaelrocks.paranoid&#x27;</span></span><br></pre></td></tr></table></figure><p>加密完就是这样子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UvvuvUuuVVvu</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* renamed from: UvvuvUuuVVvu  reason: collision with root package name */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">f4695UvvuvUuuVVvu</span> <span class="operator">=</span> UVUvvvUUvU.UvvuvUuuVVvu.UvvuvUuuVVvu(-<span class="number">2238559751030696372L</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        UVUvvvUUvU.UvvuvUuuVVvu.UvvuvUuuVVvu(-<span class="number">2238559712375990708L</span>);</span><br><span class="line">        UVUvvvUUvU.UvvuvUuuVVvu.UvvuvUuuVVvu(-<span class="number">2238559699491088820L</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>说实话，我已经不想分析了，虽然用jeb也能自动还原。但面对庞大的apk的时候，jeb的性能就不是这么高了。</p>]]></content>
      
      
      <categories>
          
          <category> msec </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msec </tag>
            
            <tag> obf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>xposed</title>
      <link href="/2022/07/15/xposed/"/>
      <url>/2022/07/15/xposed/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> msec </tag>
            
            <tag> xposed </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>frida入门</title>
      <link href="/2022/07/15/frida/"/>
      <url>/2022/07/15/frida/</url>
      
        <content type="html"><![CDATA[<p><em>PS:本文中有所引用 <a href="https://kevinspider.github.io/frida/frida-hook-java/">https://kevinspider.github.io/frida/frida-hook-java/</a></em></p><h1 id="Frida介绍"><a href="#Frida介绍" class="headerlink" title="Frida介绍"></a>Frida介绍</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Dynamic instrumentation toolkit <span class="keyword">for</span> developers, reverse-engineers, and security researchers.</span><br></pre></td></tr></table></figure><p>frida是一款适用于全平台的二进制插桩工具，<br>不知道怎么编了，省略…..</p><h1 id="Frida安装"><a href="#Frida安装" class="headerlink" title="Frida安装"></a>Frida安装</h1><p>我所演示的是安卓手机，由于改工具太过于强大，所以需准备一台<strong>root</strong>的安卓机。</p><p><strong>我的配置：XIAOMI8</strong></p><p><strong>Frida版本：15.1.3</strong></p><ul><li>先从官网下载frida-server版本<br><a href="https://github.com/frida/frida/releases/tag/15.1.3">https://github.com/frida/frida/releases/tag/15.1.3</a><br>这里要先清楚手机的架构类型，一般来说真机都是arm架构，具体进入<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">adb shell getprop ro.product.cpu.abi</span><br><span class="line">---&gt;:arm64-v8a</span><br></pre></td></tr></table></figure>然后再release里面就选择<em><strong>frida-server-15.1.3-android-arm64.xz</strong></em> 这个版本下载，然后再本地解压得到一个二进制文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adb push frida-server-15.1.3-android-arm64 /data/local/tmp</span><br><span class="line">adb shell</span><br><span class="line">su</span><br><span class="line"><span class="built_in">cd</span> /data/local/tmp</span><br><span class="line"><span class="built_in">chmod</span> 777 frida-server-15.1.3-android-arm64</span><br><span class="line">如果需要开启，就直接./frida-server-15.1.3-android-arm64</span><br></pre></td></tr></table></figure><ul><li>本机电脑还得安装frida，pip install frida&#x3D;&#x3D;15.1.3 版本最好要对应起来。</li></ul><h1 id="Frida-使用"><a href="#Frida-使用" class="headerlink" title="Frida 使用"></a>Frida 使用</h1><p>frida支持c和js脚本形式去注入。为了上手简单，以下所有的示例都采用js语法。</p><ul><li>在手机上启动frida-server，进行监听，默认端口是23946</li></ul><p>由于安卓apk采用的是jvm虚拟机编译，故而反编译出来的代码也就是java语法。</p><p>这个时候可以借助jadx-gui这个工具，来进行协助反编译。</p><p><a href="https://github.com/skylot/jadx/releases/tag/v1.4.2">https://github.com/skylot/jadx/releases/tag/v1.4.2</a></p><p>kevinspider 大佬已经给我们造好了许多轮子，我就不在重复造了，后面竞品分析的时候</p><p>会具体针对app操作演示。</p><p>就是注意一点写法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 自定义函数名()&#123;</span><br><span class="line">  <span class="title class_">Java</span>.<span class="title function_">perform</span>(<span class="keyword">function</span> (<span class="params"></span>)&#123;</span><br><span class="line">    <span class="comment">//hook代码</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">如果要启动脚本就注入，直接</span><br><span class="line"><span class="title function_">setImmediate</span>(自定义函数名,这里是时间间隔);</span><br></pre></td></tr></table></figure><p>-U: USB启动</p><p>-f：app包名</p><p>-F: 当前app进程</p><p>-l: hook脚本</p><p>–no-pause: app不暂停启动</p><p>spwan启动：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -U -f com.kevin.android -l demo1.js --no-pause</span><br></pre></td></tr></table></figure><p>attach启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">frida -UF -l demo1.js --no-pause</span><br></pre></td></tr></table></figure><h1 id="Frida特征"><a href="#Frida特征" class="headerlink" title="Frida特征"></a>Frida特征</h1><p>说完了使用，那必然一款工具肯定有人用于不正当用途，这是无法避免的。</p><p>对于安全人员该怎么防范，这是一个很重要的问题。</p><p>从拜读frida源码来看，主要有以下几个特征</p><p>启动frida-server时，会创建re.frida.server这个目录，同时<code>/proc/进程id/maps/ </code>中</p><p>也会有frida-agent.so 这个so文件</p><p>以及frida是采用gum-js引擎，所以也会有这种特征。</p><p>我这里推荐几种比较稳定的方法</p><ul><li><p>在maps中检测<code>frida</code>特征</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7455781000</span>-7456adc000 r-xp <span class="number">00000000</span> <span class="number">103</span>:<span class="number">05</span> <span class="number">2310252</span>                       /data/local/tmp/re.<span class="property">frida</span>.<span class="property">server</span>/frida-agent-<span class="number">64.</span>so</span><br><span class="line">7456adc000-7456b79000 r--p 0135a000 <span class="number">103</span>:<span class="number">05</span> <span class="number">2310252</span>                       /data/local/tmp/re.<span class="property">frida</span>.<span class="property">server</span>/frida-agent-<span class="number">64.</span>so</span><br><span class="line">7456b79000-7456b8f000 rw-p 013f7000 <span class="number">103</span>:<span class="number">05</span> <span class="number">2310252</span>                       /data/local/tmp/re.<span class="property">frida</span>.<span class="property">server</span>/frida-agent-<span class="number">64.</span>so</span><br></pre></td></tr></table></figure></li><li><p>一般frida的so文件都大于10m，用dlopen打开so，dlsym解析符号表，<code>frida_agent_main</code>看是否包含这个特征函数名</p></li><li><p><code>&quot;/proc/self/fd&quot;;</code> <code>linjector</code>查找链接器特征</p></li><li><p><code>/proc/self/task</code> 查找gum-js特征<code>gum-js-loop</code></p></li></ul><p>以上函数实现方法，一般的开发人员肯定是用open去读取。</p><p>这个时候就设计更深层次的对抗了，frida能反调试，亦能过反调试，io重定向或者hook libc的open方法。</p><p>让所有的方法都读取失败。</p><p>这个时候svc的作用就体现出来了，svc系统指令直接调用符号。</p><p>具体这个github有实现：<a href="https://github.com/darvincisec/DetectFrida/blob/master/app/src/main/c/native-lib.c">https://github.com/darvincisec/DetectFrida/blob/master/app/src/main/c/native-lib.c</a></p><p>安全开发人员也可写好一个模板，将代码内联汇编进去，</p><p>在so的init段就启动反调试进程，编译好so之后，各个项目亦能直接使用该so。</p><p><strong>当然一些大厂用的可不是这些简简单单的方法，后面分析美团的时候，有一处用了inlinehook，且已经运用到风控方案上</strong></p><h1 id="Frida反检测"><a href="#Frida反检测" class="headerlink" title="Frida反检测"></a>Frida反检测</h1><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Made By @ApkUnpacker on 29-6-2022 </span></span><br><span class="line"><span class="comment">Uploaded on 3-7-2022 ( so i can remember that i faced 4 days internet ban in my area and in free time made this. lol)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ProName</span> = <span class="title class_">ProcessName</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">ProcessName</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> openPtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> open = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> readPtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;read&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> read = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(readPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> closePtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;close&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> close = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(closePtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line">    <span class="keyword">var</span> path = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="string">&#x27;/proc/self/cmdline&#x27;</span>);</span><br><span class="line">    <span class="keyword">var</span> fd = <span class="title function_">open</span>(path, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (fd != -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> buffer = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">0x1000</span>);</span><br><span class="line">        <span class="keyword">var</span> result = <span class="title function_">read</span>(fd, buffer, <span class="number">0x1000</span>);</span><br><span class="line">        <span class="title function_">close</span>(fd);</span><br><span class="line">        result = <span class="title function_">ptr</span>(buffer).<span class="title function_">readCString</span>();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> ourlib = <span class="string">&quot;libxyz.so&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> p_pthread_create = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;pthread_create&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> pthread_create = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(p_pthread_create, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(p_pthread_create, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">ptr0, ptr1, ptr2, ptr3</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> ret = <span class="title function_">ptr</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">gmn</span>(ptr0) == ourlib) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Thread Created ptr0 : &quot;</span>, <span class="title function_">gmn</span>(ptr0), <span class="title class_">Mod</span>, ptr0.<span class="title function_">sub</span>(<span class="title class_">Mod</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">gmn</span>(ptr1) == ourlib) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Mod</span> = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(ourlib)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Thread Created ptr1 : &quot;</span>, <span class="title function_">gmn</span>(ptr1), <span class="title class_">Mod</span>, ptr1.<span class="title function_">sub</span>(<span class="title class_">Mod</span>));</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Mod</span>.<span class="title function_">add</span>(ptr1.<span class="title function_">sub</span>(<span class="title class_">Mod</span>)), &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New Thread Func&quot;</span>, ptr1.<span class="title function_">sub</span>(<span class="title class_">Mod</span>), <span class="string">&quot;arg : &quot;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New Thread Func Return : &quot;</span>, retval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">gmn</span>(ptr2) == ourlib) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Mod</span> = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(ourlib)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Thread Created ptr2 : &quot;</span>, <span class="title function_">gmn</span>(ptr2), <span class="title class_">Mod</span>, ptr2.<span class="title function_">sub</span>(<span class="title class_">Mod</span>));</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Mod</span>.<span class="title function_">add</span>(ptr2.<span class="title function_">sub</span>(<span class="title class_">Mod</span>)), &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New Thread Func&quot;</span>, ptr2.<span class="title function_">sub</span>(<span class="title class_">Mod</span>), <span class="string">&quot;arg : &quot;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New Thread Func Return : &quot;</span>, retval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_">gmn</span>(ptr3) == ourlib) &#123;</span><br><span class="line">        <span class="keyword">var</span> <span class="title class_">Mod</span> = <span class="title class_">Module</span>.<span class="title function_">findBaseAddress</span>(ourlib)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Thread Created ptr3 : &quot;</span>, <span class="title function_">gmn</span>(ptr3), <span class="title class_">Mod</span>, ptr3.<span class="title function_">sub</span>(<span class="title class_">Mod</span>));</span><br><span class="line">        <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Mod</span>.<span class="title function_">add</span>(ptr3.<span class="title function_">sub</span>(<span class="title class_">Mod</span>)), &#123;</span><br><span class="line">            <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New Thread Func&quot;</span>, ptr3.<span class="title function_">sub</span>(<span class="title class_">Mod</span>), <span class="string">&quot;arg : &quot;</span>, args[<span class="number">0</span>], args[<span class="number">1</span>]);</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;New Thread Func Return : &quot;</span>, retval);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ptr1.<span class="title function_">isNull</span>() &amp;&amp; ptr3.<span class="title function_">isNull</span>()) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;loading fake pthread_create&quot;</span>);</span><br><span class="line">        <span class="comment">/* return -1 if you not want to create that thread */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(ptr0, ptr1, ptr2, ptr3);</span><br><span class="line">        <span class="comment">// return -1;</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;       </span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">pthread_create</span>(ptr0, ptr1, ptr2, ptr3);;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="string">&quot;int&quot;</span>, [<span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>, <span class="string">&quot;pointer&quot;</span>]));</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">gmn</span>(<span class="params">fnPtr</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (fnPtr != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;          </span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Process</span>.<span class="title function_">getModuleByAddress</span>(fnPtr).<span class="property">name</span>;          </span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;<span class="variable language_">console</span>.<span class="title function_">error</span>(e);&#125;            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* few method might check frida presence so added them */</span></span><br><span class="line"><span class="keyword">var</span> inet_atonPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;inet_aton&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> inet_aton = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(inet_atonPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(inet_atonPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">addrs, structure</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">inet_aton</span>(addrs, structure);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inet_aton : &quot;</span>, addrs.<span class="title function_">readCString</span>())</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> popenPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;popen&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> popen = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(popenPtr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(popenPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">path, type</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">popen</span>(path, type);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;popen : &quot;</span>, path.<span class="title function_">readCString</span>());</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> symlinkPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;symlink&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> symlink = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(symlinkPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(symlinkPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">target, path</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">symlink</span>(target, path);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;symlink: &quot;</span>, target.<span class="title function_">readCString</span>(), path.<span class="title function_">readCString</span>());</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> symlinkatPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;symlinkat&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> symlinkat = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(symlinkatPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(symlinkatPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">target, fd, path</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">symlinkat</span>(target, fd, path);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;symlinkat : &quot;</span>, target.<span class="title function_">readCString</span>(), path.<span class="title function_">readCString</span>());</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> inet_addrPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;inet_addr&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> inet_addr = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(inet_addrPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(inet_addrPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">path</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">inet_addr</span>(path);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;inet_addr : &quot;</span>, path.<span class="title function_">readCString</span>())</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> socketPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;socket&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(socketPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(socketPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">domain, type, proto</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">socket</span>(domain, type, proto);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;socket  : &quot;</span>, domain, type, proto, <span class="string">&quot;Return : &quot;</span>, retval)</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> connectPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;connect&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> connect = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(connectPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(connectPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">fd, addr, len</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">connect</span>(fd, addr, len);</span><br><span class="line">    <span class="keyword">var</span> family = addr.<span class="title function_">readU16</span>();</span><br><span class="line">    <span class="keyword">var</span> port = addr.<span class="title function_">add</span>(<span class="number">2</span>).<span class="title function_">readU16</span>();</span><br><span class="line">    <span class="comment">//port = ((port &amp; 0xff) &lt;&lt; 8) | (port &gt;&gt; 8);</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">warn</span>(<span class="string">&quot;Connect : &quot;</span>, family, <span class="string">&quot;Port : &quot;</span>, port, <span class="string">&quot;Return : &quot;</span>, retval);</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> sendPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;send&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> send2 = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(sendPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(sendPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">socksfd, msg, slen, flag, daddr, dlen</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">send2</span>(socksfd, msg, slen, flag);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;send : &quot;</span>, socksfd, msg.<span class="title function_">readCString</span>(), slen, flag);</span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> sendtoPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;sendto&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> sendto = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(sendtoPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(sendtoPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">socksfd, msg, slen, flag, daddr, dlen</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">sendto</span>(socksfd, msg, slen, flag, daddr, dlen);</span><br><span class="line">    <span class="comment">//  console.log(&quot;sendto : &quot;,socksfd,msg.readCString(),slen,flag,daddr,dlen);                                       </span></span><br><span class="line">    <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> openPtr = <span class="title class_">Module</span>.<span class="title function_">getExportByName</span>(<span class="string">&#x27;libc.so&#x27;</span>, <span class="string">&#x27;open&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> open = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(openPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="keyword">var</span> readPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;read&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> read = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(readPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&quot;int&quot;</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//if process name not work correctly you can replace manually with your package name here </span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FakeMaps</span> = <span class="string">&quot;/data/data/&quot;</span> + <span class="title class_">ProName</span> + <span class="string">&quot;/maps&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FOpenMaps</span> = <span class="string">&quot;/data/data/&quot;</span> + <span class="title class_">ProName</span> + <span class="string">&quot;/fmaps&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FakeTask</span> = <span class="string">&quot;/data/data/&quot;</span> + <span class="title class_">ProName</span> + <span class="string">&quot;/task&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FakeExE</span> = <span class="string">&quot;/data/data/&quot;</span> + <span class="title class_">ProName</span> + <span class="string">&quot;/exe&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FakeMounts</span> = <span class="string">&quot;/data/data/&quot;</span> + <span class="title class_">ProName</span> + <span class="string">&quot;/mounts&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FakeStatus</span> = <span class="string">&quot;/data/data/&quot;</span> + <span class="title class_">ProName</span> + <span class="string">&quot;/status&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MapsFile</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="title class_">FakeMaps</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">TaskFile</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="title class_">FakeTask</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ExEFile</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="title class_">FakeExE</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FMapsFile</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="title class_">FOpenMaps</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FMountFile</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="title class_">FakeMounts</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">StatusFile</span> = <span class="keyword">new</span> <span class="title class_">File</span>(<span class="title class_">FakeStatus</span>, <span class="string">&quot;w&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MapsBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">TaskBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">ExEBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FopenBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MountBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">StatusBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Open64MapsBuffer</span> = <span class="title class_">Memory</span>.<span class="title function_">alloc</span>(<span class="number">512</span>);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(openPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">pathname, flag</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable constant_">FD</span> = <span class="title function_">open</span>(pathname, flag);</span><br><span class="line">    <span class="keyword">var</span> ch = pathname.<span class="title function_">readCString</span>();</span><br><span class="line">    <span class="keyword">if</span> (ch.<span class="title function_">indexOf</span>(<span class="string">&quot;/proc/&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; ch.<span class="title function_">indexOf</span>(<span class="string">&quot;maps&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;open : &quot;</span>, pathname.<span class="title function_">readCString</span>()) </span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">parseInt</span>(<span class="title function_">read</span>(<span class="variable constant_">FD</span>, <span class="title class_">MapsBuffer</span>, <span class="number">512</span>)) !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">MBuffer</span> = <span class="title class_">MapsBuffer</span>.<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;/data/local/tmp/re.frida.server/frida-agent-64.so&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;re.frida.server&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;re.frida&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;re.&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida.&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;rida-agent-64.so&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;agent-64.so&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper-32&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;pool-frida&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;/data/local/tmp&quot;</span>, <span class="string">&quot;/data&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-server&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;linjector&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;gum-js-loop&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida_agent_main&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;gmain&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;magisk&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;.magisk&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;/sbin/.magisk&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;libriru&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MBuffer</span> = <span class="title class_">MBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;xposed&quot;</span>, <span class="string">&quot;FakingMaps&quot;</span>);</span><br><span class="line">            <span class="title class_">MapsFile</span>.<span class="title function_">write</span>(<span class="title class_">MBuffer</span>);</span><br><span class="line">            <span class="comment">// console.log(&quot;MBuffer : &quot;,MBuffer);                                     </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> filename = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="title class_">FakeMaps</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(filename, flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ch.<span class="title function_">indexOf</span>(<span class="string">&quot;/proc&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; ch.<span class="title function_">indexOf</span>(<span class="string">&quot;task&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// console.log(&quot;open : &quot;, pathname.readCString()) </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">parseInt</span>(<span class="title function_">read</span>(<span class="variable constant_">FD</span>, <span class="title class_">TaskBuffer</span>, <span class="number">512</span>)) !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> buffer = <span class="title class_">TaskBuffer</span>.<span class="title function_">readCString</span>();</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;re.frida.server&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;rida-agent-64.so&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;agent-64.so&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper-32&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;pool-frida&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;/data/local/tmp&quot;</span>, <span class="string">&quot;/data&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-server&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;linjector&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gum-js-loop&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida_agent_main&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gmain&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;magisk&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;.magisk&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;/sbin/.magisk&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;libriru&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;xposed&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;pool-spawner&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gdbus&quot;</span>, <span class="string">&quot;FakingTask&quot;</span>);            </span><br><span class="line">            <span class="title class_">TaskFile</span>.<span class="title function_">write</span>(buffer);</span><br><span class="line">            <span class="comment">// console.log(buffer);</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> filename2 = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="title class_">FakeTask</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(filename2, flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ch.<span class="title function_">indexOf</span>(<span class="string">&quot;/proc/&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; ch.<span class="title function_">indexOf</span>(<span class="string">&quot;mounts&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;open : &quot;</span>, pathname.<span class="title function_">readCString</span>())</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">parseInt</span>(<span class="title function_">read</span>(<span class="variable constant_">FD</span>, <span class="title class_">MountBuffer</span>, <span class="number">512</span>)) !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> <span class="title class_">MNTBuffer</span> = <span class="title class_">MountBuffer</span>.<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;magisk&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;/sbin/.magisk&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;libriru&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;xposed&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;mirror&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;system_root&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">MNTBuffer</span> = <span class="title class_">MNTBuffer</span>.<span class="title function_">replaceAll</span>(<span class="string">&quot;xposed&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>)</span><br><span class="line">            <span class="title class_">FMountFile</span>.<span class="title function_">write</span>(<span class="title class_">MNTBuffer</span>);</span><br><span class="line">            <span class="comment">// console.log(&quot;MNTBuffer : &quot;,MNTBuffer);                                     </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> mountname = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="title class_">FakeMounts</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(mountname, flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      if (ch.indexOf(&quot;/proc/&quot;) &gt;=0 &amp;&amp; ch.indexOf(&quot;status&quot;) &gt;=0) &#123;     </span></span><br><span class="line"><span class="comment">         console.log(&quot;open : &quot;, pathname.readCString()) </span></span><br><span class="line"><span class="comment">         while (parseInt(read(FD, StatusBuffer, 512)) !== 0) &#123;</span></span><br><span class="line"><span class="comment">         var PStatus = StatusBuffer.readCString();   </span></span><br><span class="line"><span class="comment">         if (PStatus.indexOf(&quot;TracerPid:&quot;) &gt; -1) &#123;</span></span><br><span class="line"><span class="comment">                StatusBuffer.writeUtf8String(&quot;TracerPid:\t0&quot;);</span></span><br><span class="line"><span class="comment">                console.log(&quot;Bypassing TracerPID Check&quot;);               </span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">         StatusFile.write(PStatus);                                                </span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">            var statusname = Memory.allocUtf8String(FakeStatus);</span></span><br><span class="line"><span class="comment">            return open(statusname, flag);  </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">if</span> (ch.<span class="title function_">indexOf</span>(<span class="string">&quot;/proc&quot;</span>) &gt;= <span class="number">0</span> &amp;&amp; ch.<span class="title function_">indexOf</span>(<span class="string">&quot;exe&quot;</span>) &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;open : &quot;</span>, pathname.<span class="title function_">readCString</span>())</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">parseInt</span>(<span class="title function_">read</span>(<span class="variable constant_">FD</span>, <span class="title class_">ExEBuffer</span>, <span class="number">512</span>)) !== <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> buffer = <span class="title class_">ExEBuffer</span>.<span class="title function_">readCString</span>();</span><br><span class="line">            <span class="comment">//  console.warn(buffer)</span></span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;re.frida.server&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper-32&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;pool-frida&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;/data/local/tmp&quot;</span>, <span class="string">&quot;/data&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-server&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;linjector&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gum-js-loop&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida_agent_main&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gmain&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent&quot;</span>, <span class="string">&quot;StaySafeStayHappy&quot;</span>);</span><br><span class="line">            <span class="title class_">ExEFile</span>.<span class="title function_">write</span>(buffer);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> filename3 = <span class="title class_">Memory</span>.<span class="title function_">allocUtf8String</span>(<span class="title class_">FakeExE</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">open</span>(filename3, flag);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable constant_">FD</span>;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"><span class="keyword">var</span> fgetsPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;fgets&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> fgets = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(fgetsPtr, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(fgetsPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">buf, size, fp</span>) &#123;</span><br><span class="line">    <span class="comment">//var retval = fgets(buf, size, fp);</span></span><br><span class="line">    <span class="keyword">var</span> buffer = buf.<span class="title function_">readCString</span>();</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;re.frida.server&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;rida-agent-64.so&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;agent-64.so&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper-32&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-helper&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-agent&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;pool-frida&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;/data/local/tmp&quot;</span>, <span class="string">&quot;/data&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;server&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida-server&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;linjector&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gum-js-loop&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;frida_agent_main&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;gmain&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;magisk&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;.magisk&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;/sbin/.magisk&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;libriru&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buffer = buffer.<span class="title function_">replaceAll</span>(<span class="string">&quot;xposed&quot;</span>, <span class="string">&quot;FakingGets&quot;</span>);</span><br><span class="line">    buf.<span class="title function_">writeUtf8String</span>(buffer);</span><br><span class="line">    <span class="comment">//  console.log(buf.readCString());</span></span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">fgets</span>(buf, size, fp);</span><br><span class="line">&#125;, <span class="string">&#x27;pointer&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readlinkPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;readlink&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> readlink = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(readlinkPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(readlinkPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">pathname, buffer, bufsize</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">readlink</span>(pathname, buffer, bufsize);  </span><br><span class="line">   </span><br><span class="line">     <span class="keyword">if</span>(buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>)!==-<span class="number">1</span>||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;/data/local/tmp&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;pool-frida&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida_agent_main&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;re.frida.server&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-32.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-64.so&quot;</span>)!==-<span class="number">1</span>                        </span><br><span class="line">            )&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="title function_">readCString</span>(), <span class="string">&quot;Check in readlink&quot;</span>);</span><br><span class="line">            buffer.<span class="title function_">writeUtf8String</span>(<span class="string">&quot;/system/framework/services.jar&quot;</span>);            </span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">readlink</span>(pathname, buffer, bufsize);  </span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//    console.log(&quot;readlink : &quot;, pathname.readCString(), buffer.readCString());</span></span><br><span class="line">    <span class="keyword">return</span> retval;   </span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> readlinkatPtr = <span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="string">&quot;libc.so&quot;</span>, <span class="string">&quot;readlinkat&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> readlinkat = <span class="keyword">new</span> <span class="title class_">NativeFunction</span>(readlinkatPtr, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]);</span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">replace</span>(readlinkatPtr, <span class="keyword">new</span> <span class="title class_">NativeCallback</span>(<span class="keyword">function</span>(<span class="params">dirfd, pathname, buffer, bufsize</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> retval = <span class="title function_">readlinkat</span>(dirfd, pathname, buffer, bufsize);</span><br><span class="line">    </span><br><span class="line">     <span class="keyword">if</span>(buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>)!==-<span class="number">1</span>||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;/data/local/tmp&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;pool-frida&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida_agent_main&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;re.frida.server&quot;</span>)!==-<span class="number">1</span> || </span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-32.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">            buffer.<span class="title function_">readCString</span>().<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-64.so&quot;</span>)!==-<span class="number">1</span>                              </span><br><span class="line">            )&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(buffer.<span class="title function_">readCString</span>(), <span class="string">&quot;Check in readlinkat&quot;</span>);</span><br><span class="line">            buffer.<span class="title function_">writeUtf8String</span>(<span class="string">&quot;/system/framework/services.jar&quot;</span>);           </span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">readlinkat</span>(dirfd, pathname, buffer, bufsize);</span><br><span class="line">     &#125;</span><br><span class="line">     </span><br><span class="line"> <span class="comment">//   console.log(&quot;readlinkat : &quot;, pathname.readCString(), buffer.readCString());</span></span><br><span class="line">   <span class="keyword">return</span> retval;</span><br><span class="line">&#125;, <span class="string">&#x27;int&#x27;</span>, [<span class="string">&#x27;int&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;pointer&#x27;</span>, <span class="string">&#x27;int&#x27;</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(<span class="title class_">Module</span>.<span class="title function_">findExportByName</span>(<span class="literal">null</span>, <span class="string">&quot;strstr&quot;</span>),&#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span>(<span class="params">args</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">frida</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">var</span> str1 = args[<span class="number">0</span>].<span class="title function_">readCString</span>();</span><br><span class="line">        <span class="keyword">var</span> str2 = args[<span class="number">1</span>].<span class="title function_">readCString</span>();      </span><br><span class="line">        <span class="keyword">if</span>(str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>)!==-<span class="number">1</span> || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gum-js-loop&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>)!==-<span class="number">1</span> || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;gmain&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;linjector&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;/data/local/tmp&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;/data/local/tmp&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;pool-frida&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;pool-frida&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida_agent_main&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida_agent_main&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;re.frida.server&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;re.frida.server&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;pool-spawner&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;pool-spawner&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-64.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-agent-32.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-32.so&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-32.so&quot;</span>)!==-<span class="number">1</span> ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-64.so&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;frida-helper-64.so&quot;</span>)!==-<span class="number">1</span>  ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;/sbin/.magisk&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;/sbin/.magisk&quot;</span>)!==-<span class="number">1</span>  ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;libriru&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;libriru&quot;</span>)!==-<span class="number">1</span>  ||</span><br><span class="line">          str1.<span class="title function_">indexOf</span>(<span class="string">&quot;magisk&quot;</span>)!==-<span class="number">1</span>  || str2.<span class="title function_">indexOf</span>(<span class="string">&quot;magisk&quot;</span>)!==-<span class="number">1</span>  </span><br><span class="line">                                         </span><br><span class="line">          )&#123;          </span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">frida</span> = <span class="literal">true</span>;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;strstr : &quot;</span>,str1,str2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">onLeave</span>: <span class="keyword">function</span>(<span class="params">retval</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">frida</span>) &#123;</span><br><span class="line">            retval.<span class="title function_">replace</span>(<span class="title function_">ptr</span>(<span class="string">&quot;0x0&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Enabling it might give crash on some apps </span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Interceptor.attach(Module.findExportByName(&quot;libc.so&quot;, &quot;read&quot;), &#123;</span></span><br><span class="line"><span class="comment">    onEnter: function(args) &#123;</span></span><br><span class="line"><span class="comment">        try &#123;</span></span><br><span class="line"><span class="comment">            var buffer = args[1].readCString();</span></span><br><span class="line"><span class="comment">            if (buffer.indexOf(&quot;frida&quot;) &gt;= 0) &#123;</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;re.frida.server&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida-agent-64.so&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;rida-agent-64.so&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;agent-64.so&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida-agent-32.so&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida-helper-32&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida-helper&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida-agent&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;pool-frida&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;/data/local/tmp&quot;, &quot;/data&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;server&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida-server&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;linjector&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;gum-js-loop&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;frida_agent_main&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;gmain&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;magisk&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;.magisk&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;/sbin/.magisk&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;libriru&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                buffer = buffer.replaceAll(&quot;xposed&quot;, &quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">                args[1].writeUtf8String(buffer);</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125; catch (e) &#123;</span></span><br><span class="line"><span class="comment">            //console.error(e);</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;);</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">var memcpyPtr = Module.findExportByName(&quot;libc.so&quot;, &quot;memcpy&quot;);</span></span><br><span class="line"><span class="comment">var memcpy = new NativeFunction(memcpyPtr, &#x27;pointer&#x27;, [&#x27;pointer&#x27;, &#x27;pointer&#x27;, &#x27;int&#x27;]);</span></span><br><span class="line"><span class="comment">Interceptor.replace(memcpyPtr, new NativeCallback(function(dest, src, len) &#123;</span></span><br><span class="line"><span class="comment">    var retval = memcpy(dest, src, len);</span></span><br><span class="line"><span class="comment">    if(dest.readCString() != null &amp;&amp; src.readCString() != null &amp;&amp; (dest.readCString().indexOf(&quot;frida&quot;)&gt;=0 || src.readCString().indexOf(&quot;frida&quot;)&gt;=0) )</span></span><br><span class="line"><span class="comment">    &#123;</span></span><br><span class="line"><span class="comment">        //console.warn(&quot;memcpy : &quot;,dest.readCString(),src.readCString());</span></span><br><span class="line"><span class="comment">        var buffer = dest.readCString();</span></span><br><span class="line"><span class="comment">        var buffer2 = src.readCString();</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;re.frida.server&quot;,&quot;StaySafeStayHappy&quot;);                                                         </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida-agent-64.so&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;rida-agent-64.so&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;agent-64.so&quot;,&quot;StaySafeStayHappy&quot;);        </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida-agent-32.so&quot;,&quot;StaySafeStayHappy&quot;);       </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida-helper-32&quot;,&quot;StaySafeStayHappy&quot;);        </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida-helper&quot;,&quot;StaySafeStayHappy&quot;); </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida-agent&quot;,&quot;StaySafeStayHappy&quot;);        </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;pool-frida&quot;,&quot;StaySafeStayHappy&quot;);            </span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;/data/local/tmp&quot;,&quot;/data&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;server&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida-server&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;linjector&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;gum-js-loop&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;frida_agent_main&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer = buffer.replaceAll(&quot;gmain&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;re.frida.server&quot;,&quot;StaySafeStayHappy&quot;);                                                         </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida-agent-64.so&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;rida-agent-64.so&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;agent-64.so&quot;,&quot;StaySafeStayHappy&quot;);        </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida-agent-32.so&quot;,&quot;StaySafeStayHappy&quot;);       </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida-helper-32&quot;,&quot;StaySafeStayHappy&quot;);        </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida-helper&quot;,&quot;StaySafeStayHappy&quot;); </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida-agent&quot;,&quot;StaySafeStayHappy&quot;);        </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;pool-frida&quot;,&quot;StaySafeStayHappy&quot;);            </span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;/data/local/tmp&quot;,&quot;/data&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;server&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida-server&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;linjector&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;gum-js-loop&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;frida_agent_main&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        buffer2 = buffer2.replaceAll(&quot;gmain&quot;,&quot;StaySafeStayHappy&quot;);</span></span><br><span class="line"><span class="comment">        dest.writeUtf8String(buffer);</span></span><br><span class="line"><span class="comment">        src.writeUtf8String(buffer2);</span></span><br><span class="line"><span class="comment">       // console.log(buffer,buffer2);</span></span><br><span class="line"><span class="comment">        return memcpy(dest, src, len);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    return retval;</span></span><br><span class="line"><span class="comment">&#125;, &#x27;pointer&#x27;, [&#x27;pointer&#x27;, &#x27;pointer&#x27;, &#x27;int&#x27;]))</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 逆向 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> msec </tag>
            
            <tag> frida </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
